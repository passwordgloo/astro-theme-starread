---
import { themeConfig } from '../../starread.config';

const algoliaConfig = {
  appId: import.meta.env.PUBLIC_ALGOLIA_APP_ID || '',
  apiKey: import.meta.env.PUBLIC_ALGOLIA_SEARCH_KEY || '',
  indexName: import.meta.env.PUBLIC_ALGOLIA_INDEX_NAME || ''
};

const hasCompleteConfig = Boolean(
  algoliaConfig.appId && 
  algoliaConfig.apiKey && 
  algoliaConfig.indexName
);
---

<div class="docsearch-container">
  <button 
    id="search-toggle"
    class="p-2 rounded-full hover:bg-gray-100 dark:hover:bg-gray-800 transition-colors focus:outline-none"
    aria-label="搜索"
  >
    <span class="icon-[lucide--search] h-5 w-5 text-gray-700 dark:text-gray-300"></span>
  </button>

  <div 
    id="search-modal" 
    class="fixed inset-0 z-50 flex items-start justify-center pt-16 px-4 bg-black/60 hidden"
  >
    <div 
      class="w-full max-w-2xl bg-white dark:bg-gray-900 rounded-lg shadow-xl overflow-hidden flex flex-col"
    >
      <div class="p-4 border-b dark:border-gray-800 flex items-center justify-between">
        <div class="relative w-full">
          <span class="absolute left-3 top-1/2 -translate-y-1/2 text-gray-400">
            <span class="icon-[lucide--search] h-5 w-5"></span>
          </span>
          <input
            id="search-input"
            type="text"
            placeholder="搜索文档 (⌘K)"
            class="w-full pl-10 pr-4 py-2 bg-gray-50 dark:bg-gray-800 border-0 rounded-md text-gray-900 dark:text-white text-base focus:ring-2 focus:ring-blue-500 outline-none"
          />
        </div>
        <button 
          id="search-close"
          class="ml-2 p-2 text-gray-400 hover:text-gray-600 dark:hover:text-gray-300 rounded-full hover:bg-gray-100 dark:hover:bg-gray-800 transition-colors"
          aria-label="关闭"
        >
          <span class="icon-[lucide--x] h-5 w-5"></span>
        </button>
      </div>

      <div class="flex-1 overflow-y-auto max-h-[60vh]">
        <div id="search-initial" class="search-initial-state">
          <div class="text-center py-12">
            <div class="inline-flex items-center justify-center w-16 h-16 mb-4 rounded-full bg-blue-100 dark:bg-blue-900/30">
              <span class="icon-[lucide--search] h-8 w-8 text-blue-600 dark:text-blue-400"></span>
            </div>
            <h3 class="text-lg font-medium text-gray-900 dark:text-white mb-2">搜索文档</h3>
            <p class="text-gray-500 dark:text-gray-400 max-w-md mx-auto">
              输入关键词搜索文档内容，支持使用键盘进行导航
            </p>
            <div class="mt-6 flex justify-center space-x-3">
              <kbd class="px-2 py-1 bg-gray-200 dark:bg-gray-700 rounded text-gray-700 dark:text-gray-300 text-xs">⌘K</kbd>
              <span class="text-gray-500 dark:text-gray-400 text-sm">打开搜索</span>
            </div>
          </div>
        </div>

        <div id="search-loading" class="search-loading-state hidden">
          <div class="text-center py-10">
            <div class="inline-block animate-spin rounded-full h-8 w-8 border-4 border-gray-200 dark:border-gray-700 border-t-blue-500 mb-4"></div>
            <p class="text-gray-500 dark:text-gray-400">正在搜索...</p>
          </div>
        </div>

        <div id="search-results" class="search-results-state hidden">
          <div class="search-results-header border-b dark:border-gray-800 px-4 py-2 flex justify-between items-center text-xs text-gray-500 dark:text-gray-400">
            <span id="search-results-count">找到 0 个结果</span>
            <span class="text-xs" id="search-query"></span>
          </div>
          <div class="p-2 space-y-1" id="search-results-list"></div>
          
          <div id="search-pagination" class="mt-3 pb-3 flex justify-center items-center gap-2 hidden">
            <button id="prev-page" class="px-3 py-1 rounded bg-gray-100 dark:bg-gray-800 hover:bg-gray-200 dark:hover:bg-gray-700 disabled:opacity-50 disabled:cursor-not-allowed" disabled>
              <span class="icon-[lucide--chevron-left] h-4 w-4"></span>
            </button>
            <div id="page-numbers" class="flex gap-1"></div>
            <button id="next-page" class="px-3 py-1 rounded bg-gray-100 dark:bg-gray-800 hover:bg-gray-200 dark:hover:bg-gray-700 disabled:opacity-50 disabled:cursor-not-allowed">
              <span class="icon-[lucide--chevron-right] h-4 w-4"></span>
            </button>
          </div>
        </div>

        <div id="search-no-results" class="search-no-results hidden">
          <div class="text-center py-12 px-4">
            <div class="inline-flex items-center justify-center w-16 h-16 mb-4 rounded-full bg-gray-100 dark:bg-gray-800">
              <span class="icon-[lucide--circle-help] h-8 w-8 text-gray-500 dark:text-gray-400"></span>
            </div>
            <h3 class="text-lg font-medium text-gray-900 dark:text-white mb-2">未找到结果</h3>
            <p class="text-gray-500 dark:text-gray-400 max-w-md mx-auto">
              没有找到与 "<span id="search-no-results-query" class="font-medium"></span>" 相关的内容，请尝试其他关键词
            </p>
            <div class="mt-4">
              <button 
                id="search-clear"
                class="px-3 py-1.5 text-sm bg-gray-100 hover:bg-gray-200 dark:bg-gray-800 dark:hover:bg-gray-700 rounded-md text-gray-700 dark:text-gray-300 transition-colors"
              >
                清除搜索
              </button>
            </div>
          </div>
        </div>
      </div>

      <div class="p-3 bg-gray-50 dark:bg-gray-800 border-t dark:border-gray-700 flex flex-wrap items-center justify-between text-xs text-gray-500 dark:text-gray-400 gap-2">
        <div class="flex flex-wrap items-center gap-x-4 gap-y-1">
          <div class="flex items-center gap-1">
            <kbd class="px-2 py-1 bg-gray-200 dark:bg-gray-700 rounded text-gray-700 dark:text-gray-300">⌘K</kbd>
            <span>打开搜索</span>
          </div>
          <div class="flex items-center gap-1">
            <kbd class="px-2 py-1 bg-gray-200 dark:bg-gray-700 rounded text-gray-700 dark:text-gray-300">↓</kbd>
            <kbd class="px-2 py-1 bg-gray-200 dark:bg-gray-700 rounded text-gray-700 dark:text-gray-300">↑</kbd>
            <span>浏览</span>
          </div>
          <div class="flex items-center gap-1">
            <kbd class="px-2 py-1 bg-gray-200 dark:bg-gray-700 rounded text-gray-700 dark:text-gray-300">Enter</kbd>
            <span>选择</span>
          </div>
          <div class="flex items-center gap-1">
            <kbd class="px-2 py-1 bg-gray-200 dark:bg-gray-700 rounded text-gray-700 dark:text-gray-300">Esc</kbd>
            <span>关闭</span>
          </div>
        </div>
        <div id="search-provider" class="flex items-center gap-1.5"></div>
      </div>
    </div>
  </div>
</div>

<script is:inline src="https://cdn.jsdelivr.net/npm/algoliasearch@4/dist/algoliasearch-lite.umd.js"></script>

<script define:vars={{ algoliaConfig }}>
(function() {
  if (window.__searchInitialized) return;
  window.__searchInitialized = true;

  const searchToggle = document.getElementById('search-toggle');
  const searchModal = document.getElementById('search-modal');
  const searchInput = document.getElementById('search-input');
  const searchClose = document.getElementById('search-close');
  const searchClear = document.getElementById('search-clear');
  const initialState = document.getElementById('search-initial');
  const loadingState = document.getElementById('search-loading');
  const resultsState = document.getElementById('search-results');
  const noResultsState = document.getElementById('search-no-results');
  const resultsList = document.getElementById('search-results-list');
  const resultsCount = document.getElementById('search-results-count');
  const searchQueryDisplay = document.getElementById('search-query');
  const noResultsQuery = document.getElementById('search-no-results-query');
  const paginationContainer = document.getElementById('search-pagination');
  const prevPageBtn = document.getElementById('prev-page');
  const nextPageBtn = document.getElementById('next-page');
  const pageNumbers = document.getElementById('page-numbers');
  const searchProvider = document.getElementById('search-provider');

  let searchClient = null;
  let searchIndex = null;
  let localSearchData = null;
  let isUsingAlgolia = false;
  let isOpen = false;
  let currentQuery = '';
  let currentPage = 0;
  let totalPages = 0;
  let totalHits = 0;
  let currentResultIndex = -1;
  let searchTimeout = null;
  const hitsPerPage = 10;

  const hasConfig = Boolean(algoliaConfig.appId && algoliaConfig.apiKey && algoliaConfig.indexName);

  function updateSearchProvider(useAlgolia) {
    if (useAlgolia) {
      searchProvider.innerHTML = `
        <span class="text-gray-500 dark:text-gray-400">由</span>
        <svg class="h-4 w-4" viewBox="0 0 500 500">
          <path d="M250 0C111.929 0 0 111.929 0 250s111.929 250 250 250 250-111.929 250-250S388.071 0 250 0z" fill="#5468FF"/>
          <path d="M377.045 325.287l-85.096-85.096c12.815-17.862 20.402-39.687 20.402-63.371 0-60.509-49.076-109.585-109.585-109.585S93.181 116.311 93.181 176.82s49.076 109.585 109.585 109.585c23.684 0 45.509-7.587 63.371-20.402l85.096 85.096c4.843 4.843 12.681 4.843 17.524 0l8.288-8.288c4.843-4.843 4.843-12.681 0-17.524zM202.766 252.947c-42.016 0-76.127-34.111-76.127-76.127s34.111-76.127 76.127-76.127 76.127 34.111 76.127 76.127-34.111 76.127-76.127 76.127z" fill="#fff"/>
        </svg>
        <span class="text-blue-500 dark:text-blue-400 font-medium">Algolia</span>
      `;
    } else {
      searchProvider.innerHTML = `
        <span class="icon-[lucide--hard-drive] h-4 w-4 text-gray-500 dark:text-gray-400"></span>
        <span class="text-gray-600 dark:text-gray-400">本地离线搜索</span>
      `;
    }
  }

  async function initializeAlgolia() {
    if (!hasConfig) return false;
    try {
      searchClient = algoliasearch(algoliaConfig.appId, algoliaConfig.apiKey);
      searchIndex = searchClient.initIndex(algoliaConfig.indexName);
      await searchIndex.search('', { hitsPerPage: 0 });
      isUsingAlgolia = true;
      updateSearchProvider(true);
      console.log('✅ Algolia 连接成功');
      return true;
    } catch (error) {
      console.warn('⚠️ Algolia 连接失败，切换到本地搜索');
      return false;
    }
  }

  async function loadLocalSearchData() {
    try {
      const response = await fetch('/data.json');
      if (!response.ok) throw new Error('无法加载数据');
      localSearchData = await response.json();
      console.log('✅ 本地搜索数据加载成功，共', localSearchData.length, '条');
      return true;
    } catch (error) {
      console.error('❌ 加载本地数据失败:', error);
      return false;
    }
  }

  function localSearch(query, page = 0) {
    if (!localSearchData || !query.trim()) {
      return { hits: [], nbHits: 0, nbPages: 0, page: 0 };
    }

    const searchTerms = query.toLowerCase().split(/\s+/);
    const results = localSearchData
      .map(item => {
        let score = 0;
        const title = (item.title || '').toLowerCase();
        const content = (item.content || '').toLowerCase();
        
        searchTerms.forEach(term => {
          if (title.includes(term)) {
            score += 10;
            if (title === term) score += 20;
          }
          if (content.includes(term)) score += 1;
        });
        
        return { ...item, _score: score };
      })
      .filter(item => item._score > 0)
      .sort((a, b) => b._score - a._score);

    const nbHits = results.length;
    const nbPages = Math.ceil(nbHits / hitsPerPage);
    const start = page * hitsPerPage;
    const hits = results.slice(start, start + hitsPerPage).map(item => {
      const highlightedTitle = highlightLocalText(item.title, searchTerms);
      const highlightedContent = highlightLocalText(
        item.content ? item.content.substring(0, 200) : '',
        searchTerms
      );
      
      return {
        ...item,
        _highlightResult: {
          title: { value: highlightedTitle },
          content: { value: highlightedContent }
        },
        _snippetResult: {
          content: { value: highlightedContent + '...' }
        }
      };
    });

    return { hits, nbHits, nbPages, page };
  }

  function highlightLocalText(text, terms) {
    if (!text) return '';
    let result = text;
    terms.forEach(term => {
      const regex = new RegExp(`(${escapeRegex(term)})`, 'gi');
      result = result.replace(regex, '<mark class="bg-yellow-200 dark:bg-yellow-700 text-gray-900 dark:text-white">\$1</mark>');
    });
    return result;
  }

  function escapeRegex(str) {
    return str.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
  }

  function renderResults(hits) {
    resultsList.innerHTML = '';
    hits.forEach((hit, index) => {
      const div = document.createElement('div');
      div.className = 'search-result-item p-3 rounded-md hover:bg-gray-50 dark:hover:bg-gray-800 cursor-pointer transition-colors border-l-2 border-transparent';
      div.dataset.index = index;
      div.dataset.url = hit.url || hit.objectID;
      
      const title = hit._highlightResult?.title?.value || hit.title || '无标题';
      const content = hit._snippetResult?.content?.value || hit._highlightResult?.content?.value || hit.content || '';
      const coverUrl = hit.cover || hit.image || '';
      
      div.innerHTML = `
        <div class="flex gap-3">
          ${coverUrl ? `
            <div class="flex-shrink-0">
              <img 
                src="${coverUrl}" 
                alt="${hit.title || '封面'}"
                class="w-20 h-20 object-cover rounded-md"
                onerror="this.style.display='none';this.nextElementSibling.style.display='flex'"
              />
              <div class="w-20 h-20 bg-gray-100 dark:bg-gray-800 rounded-md flex items-center justify-center hidden">
                <span class="icon-[lucide--file-text] h-8 w-8 text-gray-400"></span>
              </div>
            </div>
          ` : `
            <div class="flex-shrink-0 w-20 h-20 bg-gray-100 dark:bg-gray-800 rounded-md flex items-center justify-center">
              <span class="icon-[lucide--file-text] h-8 w-8 text-gray-400"></span>
            </div>
          `}
          <div class="flex-1 min-w-0">
            <h4 class="font-medium text-gray-900 dark:text-white mb-1 line-clamp-1">${title}</h4>
            <p class="text-sm text-gray-600 dark:text-gray-400 line-clamp-2 mb-1">${content}</p>
            ${hit.url ? `
              <span class="text-xs text-blue-500 hover:text-blue-600 inline-flex items-center gap-1">
                查看详情
                <span class="icon-[lucide--arrow-right] h-3 w-3"></span>
              </span>
            ` : ''}
          </div>
        </div>
      `;
      
      div.addEventListener('click', () => { if (hit.url) window.location.href = hit.url; });
      div.addEventListener('mouseenter', () => setActiveResult(index));
      resultsList.appendChild(div);
    });
  }

  function setActiveResult(index) {
    const items = resultsList.querySelectorAll('.search-result-item');
    items.forEach((item, i) => {
      if (i === index) {
        item.classList.add('bg-gray-100', 'dark:bg-gray-800', 'border-blue-500');
        currentResultIndex = index;
        item.scrollIntoView({ block: 'nearest', behavior: 'smooth' });
      } else {
        item.classList.remove('bg-gray-100', 'dark:bg-gray-800', 'border-blue-500');
      }
    });
  }

  function renderPagination() {
    if (totalPages <= 1) {
      paginationContainer.classList.add('hidden');
      return;
    }
    paginationContainer.classList.remove('hidden');
    pageNumbers.innerHTML = '';
    prevPageBtn.disabled = currentPage === 0;
    nextPageBtn.disabled = currentPage >= totalPages - 1;

    const maxButtons = 7;
    let startPage = Math.max(0, currentPage - Math.floor(maxButtons / 2));
    let endPage = Math.min(totalPages - 1, startPage + maxButtons - 1);
    if (endPage - startPage < maxButtons - 1) {
      startPage = Math.max(0, endPage - maxButtons + 1);
    }

    if (startPage > 0) {
      addPageButton(0);
      if (startPage > 1) pageNumbers.appendChild(createEllipsis());
    }
    for (let i = startPage; i <= endPage; i++) addPageButton(i);
    if (endPage < totalPages - 1) {
      if (endPage < totalPages - 2) pageNumbers.appendChild(createEllipsis());
      addPageButton(totalPages - 1);
    }
  }

  function addPageButton(pageNum) {
    const button = document.createElement('button');
    button.textContent = pageNum + 1;
    button.className = `px-3 py-1 rounded text-sm transition-colors ${
      pageNum === currentPage
        ? 'bg-blue-500 text-white'
        : 'bg-gray-100 dark:bg-gray-800 hover:bg-gray-200 dark:hover:bg-gray-700 text-gray-700 dark:text-gray-300'
    }`;
    button.addEventListener('click', () => {
      currentPage = pageNum;
      performSearch(currentQuery);
    });
    pageNumbers.appendChild(button);
  }

  function createEllipsis() {
    const span = document.createElement('span');
    span.textContent = '...';
    span.className = 'px-2 text-gray-500';
    return span;
  }

  async function performSearch(query) {
    currentQuery = query;
    if (!query.trim()) {
      showInitialState();
      return;
    }
    showLoadingState();

    try {
      let result;
      if (isUsingAlgolia && searchIndex) {
        result = await searchIndex.search(query, {
          page: currentPage,
          hitsPerPage: hitsPerPage,
          attributesToSnippet: ['content:30'],
          snippetEllipsisText: '...',
        });
      } else {
        result = localSearch(query, currentPage);
      }

      totalHits = result.nbHits;
      totalPages = result.nbPages;

      console.log('搜索:', {
        query,
        provider: isUsingAlgolia ? 'Algolia' : '本地',
        page: currentPage + 1,
        totalHits
      });

      if (result.hits.length > 0) {
        showResultsState(result.hits, query);
      } else {
        showNoResultsState(query);
      }
    } catch (error) {
      console.error('搜索失败:', error);
      if (isUsingAlgolia) {
        isUsingAlgolia = false;
        updateSearchProvider(false);
        performSearch(query);
      } else {
        showNoResultsState(query);
      }
    }
  }

  function showInitialState() {
    initialState.classList.remove('hidden');
    loadingState.classList.add('hidden');
    resultsState.classList.add('hidden');
    noResultsState.classList.add('hidden');
    currentResultIndex = -1;
  }

  function showLoadingState() {
    initialState.classList.add('hidden');
    loadingState.classList.remove('hidden');
    resultsState.classList.add('hidden');
    noResultsState.classList.add('hidden');
  }

  function showResultsState(hits, query) {
    initialState.classList.add('hidden');
    loadingState.classList.add('hidden');
    resultsState.classList.remove('hidden');
    noResultsState.classList.add('hidden');
    resultsCount.textContent = `找到 ${totalHits} 个结果`;
    searchQueryDisplay.textContent = `"${query}"`;
    renderResults(hits);
    renderPagination();
    currentResultIndex = -1;
  }

  function showNoResultsState(query) {
    initialState.classList.add('hidden');
    loadingState.classList.add('hidden');
    resultsState.classList.add('hidden');
    noResultsState.classList.remove('hidden');
    noResultsQuery.textContent = query;
  }

  function openSearch() {
    isOpen = true;
    searchModal.classList.remove('hidden');
    document.body.style.overflow = 'hidden';
    searchInput.focus();
    showInitialState();
  }

  function closeSearch() {
    isOpen = false;
    searchModal.classList.add('hidden');
    document.body.style.overflow = '';
    searchInput.value = '';
    currentPage = 0;
    currentQuery = '';
    showInitialState();
  }

  searchInput.addEventListener('input', (e) => {
    clearTimeout(searchTimeout);
    const query = e.target.value.trim();
    if (!query) {
      showInitialState();
      return;
    }
    searchTimeout = setTimeout(() => {
      currentPage = 0;
      performSearch(query);
    }, 300);
  });

  searchInput.addEventListener('keydown', (e) => {
    const items = resultsList.querySelectorAll('.search-result-item');
    if (e.key === 'ArrowDown') {
      e.preventDefault();
      if (items.length > 0) {
        currentResultIndex = Math.min(currentResultIndex + 1, items.length - 1);
        setActiveResult(currentResultIndex);
      }
    } else if (e.key === 'ArrowUp') {
      e.preventDefault();
      if (items.length > 0) {
        currentResultIndex = Math.max(currentResultIndex - 1, 0);
        setActiveResult(currentResultIndex);
      }
    } else if (e.key === 'Enter') {
      e.preventDefault();
      if (currentResultIndex >= 0 && items[currentResultIndex]) {
        items[currentResultIndex].click();
      }
    }
  });

  prevPageBtn.addEventListener('click', () => {
    if (currentPage > 0) {
      currentPage--;
      performSearch(currentQuery);
    }
  });

  nextPageBtn.addEventListener('click', () => {
    if (currentPage < totalPages - 1) {
      currentPage++;
      performSearch(currentQuery);
    }
  });

  searchToggle?.addEventListener('click', openSearch);
  searchClose?.addEventListener('click', closeSearch);
  searchClear?.addEventListener('click', () => {
    searchInput.value = '';
    showInitialState();
  });
  searchModal?.addEventListener('click', (e) => {
    if (e.target === searchModal) closeSearch();
  });

  document.addEventListener('keydown', (e) => {
    if ((e.ctrlKey || e.metaKey) && e.key === 'k') {
      e.preventDefault();
      isOpen ? closeSearch() : openSearch();
    }
    if (e.key === 'Escape' && isOpen) {
      closeSearch();
    }
  });

  // 初始化
  (async () => {
    const algoliaOk = await initializeAlgolia();
    if (!algoliaOk) {
      await loadLocalSearchData();
      updateSearchProvider(false);
    }
  })();
})();
</script>

<style>
  mark {
    padding: 0 2px;
    border-radius: 2px;
  }

  .search-result-item {
    animation: fadeIn 0.2s ease-in;
  }

  @keyframes fadeIn {
    from {
      opacity: 0;
      transform: translateY(-4px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  .overflow-y-auto::-webkit-scrollbar {
    width: 6px;
  }

  .overflow-y-auto::-webkit-scrollbar-track {
    background: transparent;
  }

  .overflow-y-auto::-webkit-scrollbar-thumb {
    background: rgba(156, 163, 175, 0.5);
    border-radius: 3px;
  }

  .dark .overflow-y-auto::-webkit-scrollbar-thumb {
    background: rgba(75, 85, 99, 0.5);
  }
</style>
