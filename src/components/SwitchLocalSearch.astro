---
import { themeConfig } from '../../starread.config';
---

<div class="docsearch-container">
  <!-- 搜索按钮触发器 -->
  <button 
    id="local-search-toggle"
    class="p-2 rounded-full hover:bg-gray-100 dark:hover:bg-gray-800 transition-colors focus:outline-none"
    aria-label="搜索"
  >
    <span class="icon-[lucide--search] h-5 w-5 text-gray-700 dark:text-gray-300"></span>
  </button>

  <!-- 搜索弹窗 -->
  <div 
    id="local-search-modal" 
    class="fixed inset-0 z-50 flex items-start justify-center pt-16 px-4 bg-black/60 hidden"
  >
    <div 
      class="w-full max-w-2xl bg-white dark:bg-gray-900 rounded-lg shadow-xl overflow-hidden flex flex-col"
    >
      <!-- 搜索头部 -->
      <div class="p-4 border-b dark:border-gray-800 flex items-center justify-between">
        <div class="relative w-full">
          <span class="absolute left-3 top-1/2 -translate-y-1/2 text-gray-400">
            <span class="icon-[lucide--search] h-5 w-5"></span>
          </span>
          <input
            id="local-search-input"
            type="text"
            placeholder="搜索文档 (⌘K)"
            class="w-full pl-10 pr-4 py-2 bg-gray-50 dark:bg-gray-800 border-0 rounded-md text-gray-900 dark:text-white text-base focus:ring-2 focus:ring-blue-500 outline-none"
          />
        </div>
        <button 
          id="local-search-close"
          class="ml-2 p-2 text-gray-400 hover:text-gray-600 dark:hover:text-gray-300 rounded-full hover:bg-gray-100 dark:hover:bg-gray-800 transition-colors"
          aria-label="关闭"
        >
          <span class="icon-[lucide--x] h-5 w-5"></span>
        </button>
      </div>

      <!-- 搜索内容区 -->
      <div class="flex-1 overflow-y-auto max-h-[60vh]">
        <!-- 初始状态 -->
        <div id="local-search-initial" class="search-initial-state">
          <div class="text-center py-12">
            <div class="inline-flex items-center justify-center w-16 h-16 mb-4 rounded-full bg-blue-100 dark:bg-blue-900/30">
              <span class="icon-[lucide--search] h-8 w-8 text-blue-600 dark:text-blue-400"></span>
            </div>
            <h3 class="text-lg font-medium text-gray-900 dark:text-white mb-2">搜索文档</h3>
            <p class="text-gray-500 dark:text-gray-400 max-w-md mx-auto">
              输入关键词搜索文档内容，支持使用键盘进行导航
            </p>
            <div class="mt-6 flex justify-center space-x-3">
              <kbd class="px-2 py-1 bg-gray-200 dark:bg-gray-700 rounded text-gray-700 dark:text-gray-300 text-xs">⌘K</kbd>
              <span class="text-gray-500 dark:text-gray-400 text-sm">打开搜索</span>
            </div>
          </div>
        </div>

        <!-- 加载状态 -->
        <div id="local-search-loading" class="search-loading-state hidden">
          <div class="text-center py-10">
            <div class="inline-block animate-spin rounded-full h-8 w-8 border-4 border-gray-200 dark:border-gray-700 border-t-blue-500 mb-4"></div>
            <p class="text-gray-500 dark:text-gray-400">正在搜索...</p>
          </div>
        </div>

        <!-- 搜索结果 -->
        <div id="local-search-results" class="search-results-state hidden">
          <div class="search-results-header border-b dark:border-gray-800 px-4 py-2 flex justify-between items-center text-xs text-gray-500 dark:text-gray-400">
            <span id="local-search-results-count">找到 0 个结果</span>
            <span class="text-xs" id="local-search-query"></span>
          </div>
          <div class="p-2 space-y-1" id="local-search-results-list">
            <!-- 搜索结果将通过JavaScript动态添加 -->
          </div>
          
          <!-- 分页控件 -->
          <div id="local-search-pagination" class="mt-3 text-center pb-3 hidden">
            <!-- 分页按钮将通过JavaScript动态添加 -->
          </div>
        </div>

        <!-- 无结果状态 -->
        <div id="local-search-no-results" class="search-no-results hidden">
          <div class="text-center py-12 px-4">
            <div class="inline-flex items-center justify-center w-16 h-16 mb-4 rounded-full bg-gray-100 dark:bg-gray-800">
              <span class="icon-[lucide--circle-help] h-8 w-8 text-gray-500 dark:text-gray-400"></span>
            </div>
            <h3 class="text-lg font-medium text-gray-900 dark:text-white mb-2">未找到结果</h3>
            <p class="text-gray-500 dark:text-gray-400 max-w-md mx-auto">
              没有找到与 "<span id="local-search-no-results-query" class="font-medium"></span>" 相关的内容，请尝试其他关键词
            </p>
            <div class="mt-4">
              <button 
                id="local-search-clear"
                class="px-3 py-1.5 text-sm bg-gray-100 hover:bg-gray-200 dark:bg-gray-800 dark:hover:bg-gray-700 rounded-md text-gray-700 dark:text-gray-300 transition-colors"
              >
                清除搜索
              </button>
            </div>
          </div>
        </div>
      </div>

      <!-- 底部提示 -->
      <div class="p-3 bg-gray-50 dark:bg-gray-800 border-t dark:border-gray-700 flex flex-wrap items-center justify-between text-xs text-gray-500 dark:text-gray-400 gap-2">
        <div class="flex flex-wrap items-center gap-x-4 gap-y-1">
          <div class="flex items-center gap-1">
            <kbd class="px-2 py-1 bg-gray-200 dark:bg-gray-700 rounded text-gray-700 dark:text-gray-300">⌘K</kbd>
            <span>打开搜索</span>
          </div>
          <div class="flex items-center gap-1">
            <kbd class="px-2 py-1 bg-gray-200 dark:bg-gray-700 rounded text-gray-700 dark:text-gray-300">↓</kbd>
            <kbd class="px-2 py-1 bg-gray-200 dark:bg-gray-700 rounded text-gray-700 dark:text-gray-300">↑</kbd>
            <span>浏览结果</span>
          </div>
          <div class="flex items-center gap-1">
            <kbd class="px-2 py-1 bg-gray-200 dark:bg-gray-700 rounded text-gray-700 dark:text-gray-300">Enter</kbd>
            <span>选择</span>
          </div>
          <div class="flex items-center gap-1">
            <kbd class="px-2 py-1 bg-gray-200 dark:bg-gray-700 rounded text-gray-700 dark:text-gray-300">Esc</kbd>
            <span>关闭</span>
          </div>
        </div>
        <div class="flex items-center gap-1">
          <span>本地搜索</span>
        </div>
      </div>
    </div>
  </div>
</div>

<!-- 前端交互脚本 -->
<script is:inline>
  // 使用立即执行函数表达式(IIFE)来隔离变量作用域
  (function() {
    // 确保脚本只执行一次
    if (window.__localSearchInitialized) return;
    window.__localSearchInitialized = true;

    // 搜索相关状态
    let isOpen = false;
    let searchQuery = '';
    let searchResults = [];
    let isSearching = false;
    let currentResultIndex = -1;
    let currentPage = 1;
    let paginationInfo = {
      currentPage: 1,
      totalPages: 0,
      hitsPerPage: 5,
      nbHits: 0
    };

    // DOM元素引用
    const searchToggle = document.getElementById('local-search-toggle');
    const searchModal = document.getElementById('local-search-modal');
    const searchInput = document.getElementById('local-search-input');
    const searchClose = document.getElementById('local-search-close');
    const searchClear = document.getElementById('local-search-clear');
    const initialState = document.getElementById('local-search-initial');
    const loadingState = document.getElementById('local-search-loading');
    const resultsState = document.getElementById('local-search-results');
    const noResultsState = document.getElementById('local-search-no-results');
    const resultsList = document.getElementById('local-search-results-list');
    const resultsCount = document.getElementById('local-search-results-count');
    const searchQueryDisplay = document.getElementById('local-search-query');
    const noResultsQuery = document.getElementById('local-search-no-results-query');
    const paginationContainer = document.getElementById('local-search-pagination');

    // 转义正则表达式特殊字符
    const escapeRegExp = (string) => {
      return string.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
    };

    // 格式化分类
    const formatCategories = (categories) => {
      if (!categories) return '';
      return Array.isArray(categories) ? categories.join(' / ') : categories;
    };

    // 格式化标签
    const formatTags = (tags) => {
      if (!tags) return [];
      return Array.isArray(tags) ? tags : tags.split(',').map(tag => tag.trim());
    };

    // 渲染高亮标题
    const renderHighlightedTitle = (hit, query) => {
      if (!query) return hit.title || '未命名文档';
      const regex = new RegExp(`(${escapeRegExp(query)})`, 'gi');
      return hit.title ? hit.title.replace(regex, '<mark>$1</mark>') : '未命名文档';
    };

    // 渲染高亮内容
    const renderHighlightedContent = (hit, query) => {
      if (!hit.content) return '';
      if (!query) return hit.content.split('\n').slice(0, 2).join(' ');
      const regex = new RegExp(`(${escapeRegExp(query)})`, 'gi');
      return hit.content.replace(regex, '<mark>$1</mark>');
    };

    // 计算可见页码
    const getVisiblePages = () => {
      const total = paginationInfo.totalPages;
      const current = paginationInfo.currentPage;
      const pages = [];
      
      if (total <= 5) {
        // 总页数小于等于5时，显示所有页码
        for (let i = 1; i <= total; i++) {
          pages.push(i);
        }
      } else {
        // 显示当前页附近的页码
        pages.push(1);
        
        if (current > 3) {
          pages.push(0); // 省略号
        }
        
        const start = Math.max(2, current - 1);
        const end = Math.min(total - 1, current + 1);
        
        for (let i = start; i <= end; i++) {
          pages.push(i);
        }
        
        if (current < total - 2) {
          pages.push(0); // 省略号
        }
        
        pages.push(total);
      }
      
      return pages;
    };

    // 渲染分页控件
    const renderPagination = () => {
      if (paginationInfo.totalPages <= 1) {
        paginationContainer.classList.add('hidden');
        return;
      }
      
      paginationContainer.classList.remove('hidden');
      const visiblePages = getVisiblePages();
      
      paginationContainer.innerHTML = visiblePages.map(page => {
        const isActive = page === paginationInfo.currentPage;
        const isEllipsis = page === 0;
        const isDisabled = page === 0 || page > paginationInfo.totalPages;
        
        let className = 'px-3 py-1 mx-1 rounded text-sm';
        if (isActive) {
          className += ' bg-blue-500 text-white';
        } else if (!isDisabled) {
          className += ' bg-gray-100 dark:bg-gray-800 text-gray-700 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-700';
        } else {
          className += ' text-gray-400 cursor-not-allowed';
        }
        
        return `
          <button 
            ${isDisabled ? 'disabled' : ''}
            class="${className}"
            data-page="${page}"
            ${isDisabled ? '' : 'onclick="window.__localSearch.goToPage(' + page + ')"'}
          >
            ${isEllipsis ? '...' : page}
          </button>
        `;
      }).join('');
    };

    // 渲染搜索结果
    const renderSearchResults = () => {
      resultsList.innerHTML = '';
      
      searchResults.forEach((hit, index) => {
        const isActive = index === currentResultIndex;
        const link = getResultLink(hit);
        
        const resultItem = document.createElement('div');
        resultItem.className = `flex items-start p-3 rounded-md hover:bg-gray-100 dark:hover:bg-gray-800 transition-colors group ${isActive ? 'bg-blue-50 dark:bg-blue-900/20' : ''}`;
        resultItem.setAttribute('data-index', index);
        
        let resultHtml = '';
        
        // 添加封面图片
        if (hit.cover && hit.cover.trim() !== '') {
          resultHtml += `
            <div class="mr-3 flex-shrink-0">
              <img
                src="${hit.cover}"
                alt="${hit.title}"
                class="w-16 h-12 object-cover rounded"
              />
            </div>
          `;
        }
        
        resultHtml += `
          <div class="flex-1 min-w-0">
            <h3 class="font-medium text-gray-900 dark:text-white truncate group-hover:text-blue-600 dark:group-hover:text-blue-400">
              ${renderHighlightedTitle(hit, searchQuery)}
            </h3>
            ${hit.content ? `
              <p class="mt-1 text-sm text-gray-600 dark:text-gray-400 line-clamp-2">
                ${renderHighlightedContent(hit, searchQuery)}
              </p>
            ` : ''}
            <div class="mt-2 flex items-center text-xs text-gray-500 dark:text-gray-500">
              ${hit.categories ? `
                <span class="mr-3">
                  📂 ${formatCategories(hit.categories)}
                </span>
              ` : ''}
              ${hit.tags ? `
                <div class="flex flex-wrap gap-1">
                  ${formatTags(hit.tags).map(tag => `
                    <span class="bg-blue-50 text-blue-700 dark:bg-blue-900/30 dark:text-blue-400 px-2 py-0.5 rounded-full">
                      #${tag}
                    </span>
                  `).join('')}
                </div>
              ` : ''}
            </div>
          </div>
        `;
        
        resultItem.innerHTML = resultHtml;
        resultItem.addEventListener('click', () => selectResult(hit));
        resultItem.addEventListener('mouseenter', () => currentResultIndex = index);
        
        resultsList.appendChild(resultItem);
      });
    };

    // 获取结果链接
    const getResultLink = (hit) => {
      // 确定collection类型
      const collection = hit.collection || hit._collection || 'articles';
      
      if (hit.permalink) {
        // 如果有永久链接，直接使用
        return hit.permalink.startsWith('/') ? hit.permalink : `/${hit.permalink}`;
      } else if (hit.route) {
        // 如果有route字段，使用它
        return hit.route;
      } else if (hit.url) {
        // 如果有url字段，使用它
        return hit.url;
      } else {
        // 否则使用基于collection和slug的路径
        return `/${collection}/${hit.slug}`;
      }
    };

    // 选择指定结果
    const selectResult = (hit) => {
      window.location.href = getResultLink(hit);
    };

    // 选择当前结果
    const selectCurrentResult = () => {
      if (currentResultIndex >= 0 && currentResultIndex < searchResults.length) {
        selectResult(searchResults[currentResultIndex]);
      }
    };

    // 聚焦下一个结果
    const focusNextResult = () => {
      if (searchResults.length === 0) return;
      
      if (currentResultIndex < searchResults.length - 1) {
        currentResultIndex++;
      } else {
        currentResultIndex = 0;
      }
      
      // 重新渲染结果以更新高亮
      renderSearchResults();
      // 滚动到当前高亮结果
      scrollToActiveResult();
    };

    // 聚焦上一个结果
    const focusPrevResult = () => {
      if (searchResults.length === 0) return;
      
      if (currentResultIndex > 0) {
        currentResultIndex--;
      } else {
        currentResultIndex = searchResults.length - 1;
      }
      
      // 重新渲染结果以更新高亮
      renderSearchResults();
      // 滚动到当前高亮结果
      scrollToActiveResult();
    };

    // 滚动到当前激活的结果
    const scrollToActiveResult = () => {
      setTimeout(() => {
        const activeElement = document.querySelector('.search-results-state .bg-blue-50, .search-results-state .bg-blue-900\/20');
        if (activeElement) {
          activeElement.scrollIntoView({ block: 'nearest', behavior: 'smooth' });
        }
      }, 50);
    };

    // 切换搜索弹窗
    const toggleSearch = () => {
      isOpen = !isOpen;
      
      if (isOpen) {
        searchModal.classList.remove('hidden');
        // 添加过渡效果
        setTimeout(() => {
          searchModal.style.opacity = '1';
        }, 10);
        setTimeout(() => {
          searchInput.focus();
        }, 100);
      } else {
        searchModal.style.opacity = '0';
        setTimeout(() => {
          searchModal.classList.add('hidden');
          resetSearch();
        }, 200);
      }
    };

    // 关闭搜索
    const closeSearch = () => {
      if (isOpen) {
        toggleSearch();
      }
    };

    // 重置搜索状态
    const resetSearch = () => {
      searchQuery = '';
      searchInput.value = '';
      searchResults = [];
      currentResultIndex = -1;
      currentPage = 1;
      paginationInfo = {
        currentPage: 1,
        totalPages: 0,
        hitsPerPage: 5,
        nbHits: 0
      };
      
      // 显示初始状态
      showInitialState();
    };

    // 清除搜索
    const clearSearch = () => {
      searchQuery = '';
      searchInput.value = '';
      searchResults = [];
      currentResultIndex = -1;
      currentPage = 1;
      searchInput.focus();
      showInitialState();
    };

    // 显示初始状态
    const showInitialState = () => {
      initialState.classList.remove('hidden');
      loadingState.classList.add('hidden');
      resultsState.classList.add('hidden');
      noResultsState.classList.add('hidden');
    };

    // 显示加载状态
    const showLoadingState = () => {
      initialState.classList.add('hidden');
      loadingState.classList.remove('hidden');
      resultsState.classList.add('hidden');
      noResultsState.classList.add('hidden');
    };

    // 显示结果状态
    const showResultsState = () => {
      initialState.classList.add('hidden');
      loadingState.classList.add('hidden');
      resultsState.classList.remove('hidden');
      noResultsState.classList.add('hidden');
      
      // 更新结果计数和查询显示
      resultsCount.textContent = `找到 ${paginationInfo.nbHits} 个结果`;
      searchQueryDisplay.textContent = searchQuery;
      
      // 渲染搜索结果
      renderSearchResults();
      
      // 渲染分页控件
      renderPagination();
    };

    // 显示无结果状态
    const showNoResultsState = () => {
      initialState.classList.add('hidden');
      loadingState.classList.add('hidden');
      resultsState.classList.add('hidden');
      noResultsState.classList.remove('hidden');
      
      // 更新无结果查询显示
      noResultsQuery.textContent = searchQuery;
    };

    // 加载模拟搜索结果
    const loadMockResults = async () => {
      try {
        const response = await fetch('/data.json');
        const allDocs = await response.json();
        
        // 简单的搜索过滤
        const filteredDocs = allDocs.filter(doc => 
          (doc.title && doc.title.toLowerCase().includes(searchQuery.toLowerCase())) ||
          (doc.content && doc.content.toLowerCase().includes(searchQuery.toLowerCase())) ||
          (doc.tags && String(doc.tags).toLowerCase().includes(searchQuery.toLowerCase()))
        );
        
        // 分页处理
        const startIndex = (currentPage - 1) * paginationInfo.hitsPerPage;
        const endIndex = startIndex + paginationInfo.hitsPerPage;
        const paginatedDocs = filteredDocs.slice(startIndex, endIndex);
        
        searchResults = paginatedDocs;
        paginationInfo = {
          currentPage: currentPage,
          totalPages: Math.ceil(filteredDocs.length / paginationInfo.hitsPerPage),
          hitsPerPage: paginationInfo.hitsPerPage,
          nbHits: filteredDocs.length
        };
        
        if (filteredDocs.length > 0) {
          showResultsState();
        } else {
          showNoResultsState();
        }
      } catch (err) {
        console.error('获取模拟数据失败:', err);
        // 如果获取data.json失败，使用简单的模拟数据
        searchResults = [
          {
            objectID: 'mock-1',
            title: `模拟结果 1 - ${searchQuery}`,
            content: `这是与"${searchQuery}"相关的模拟结果内容。`,
            slug: 'mock-result-1',
            categories: ['文档'],
            tags: ['示例', '搜索']
          },
          {
            objectID: 'mock-2',
            title: `模拟结果 2 - ${searchQuery}`,
            content: `这是第二个模拟结果，展示了如何处理搜索关键词"${searchQuery}"。`,
            slug: 'mock-result-2',
            categories: ['指南'],
            tags: ['教程', '示例']
          }
        ];
        
        paginationInfo = {
          currentPage: 1,
          totalPages: 1,
          hitsPerPage: 5,
          nbHits: 2
        };
        
        showResultsState();
      }
    };

    // 搜索处理函数
    const handleSearch = async () => {
      searchQuery = searchInput.value.trim();
      
      if (!searchQuery) {
        clearSearch();
        return;
      }

      isSearching = true;
      currentResultIndex = -1;
      currentPage = 1;
      
      try {
        showLoadingState();
        await loadMockResults();
      } catch (error) {
        console.error('搜索失败:', error);
        searchResults = [];
        showNoResultsState();
      } finally {
        isSearching = false;
      }
    };

    // 分页处理
    const goToPage = async (page) => {
      if (page === paginationInfo.currentPage || page < 1 || page > paginationInfo.totalPages) {
        return;
      }
      
      isSearching = true;
      currentResultIndex = -1;
      currentPage = page;
      
      try {
        showLoadingState();
        await loadMockResults();
      } catch (error) {
        console.error('分页加载失败:', error);
      } finally {
        isSearching = false;
      }
    };

    // 键盘事件处理
    const handleKeyDown = (e) => {
      // 处理Tab键
      if (e.key === 'Tab') {
        e.preventDefault();
        focusNextResult();
      }
    };

    // 全局键盘快捷键处理
    const handleGlobalKeydown = (e) => {
      // Cmd/Ctrl + K 打开搜索
      if ((e.metaKey || e.ctrlKey) && e.key === 'k') {
        e.preventDefault();
        toggleSearch();
      }
      
      // 全局ESC键关闭
      if (e.key === 'Escape' && isOpen) {
        e.preventDefault();
        closeSearch();
      }
    };

    // 为window对象添加公开方法，以便分页按钮调用
    window.__localSearch = {
      goToPage: goToPage
    };

    // 事件监听器
    if (searchToggle) {
      searchToggle.addEventListener('click', toggleSearch);
    }
    
    if (searchClose) {
      searchClose.addEventListener('click', closeSearch);
    }
    
    if (searchClear) {
      searchClear.addEventListener('click', clearSearch);
    }
    
    if (searchInput) {
      searchInput.addEventListener('input', () => {
        // 防抖处理
        const timeoutId = setTimeout(handleSearch, 300);
        return () => clearTimeout(timeoutId);
      });
      
      searchInput.addEventListener('keydown', (e) => {
        if (e.key === 'Escape') {
          closeSearch();
        } else if (e.key === 'ArrowDown') {
          e.preventDefault();
          focusNextResult();
        } else if (e.key === 'ArrowUp') {
          e.preventDefault();
          focusPrevResult();
        } else if (e.key === 'Enter') {
          e.preventDefault();
          selectCurrentResult();
        } else {
          handleKeyDown(e);
        }
      });
    }
    
    // 点击模态框背景关闭
    if (searchModal) {
      searchModal.addEventListener('click', (e) => {
        if (e.target === searchModal) {
          closeSearch();
        }
      });
    }
    
    // 全局键盘事件
    document.addEventListener('keydown', handleGlobalKeydown);
  })();
</script>

<style>
/* 搜索弹窗过渡动画 */
#local-search-modal {
  opacity: 0;
  transition: opacity 0.2s ease;
}

#local-search-modal:not(.hidden) {
  opacity: 1;
}

/* 搜索结果容器样式 */
.search-results-state {
  max-height: calc(60vh - 6rem);
  min-height: 200px;
}

/* 高亮文本样式 */
mark {
  background-color: #fde047;
  color: #000;
  font-weight: 500;
  border-radius: 0.25rem;
  padding: 0.125rem 0.25rem;
}

/* 暗色模式下的高亮样式 */
.dark mark {
  background-color: rgba(253, 224, 71, 0.3);
  color: #fde047;
}

/* 图片样式 */
.search-results-state img {
  border-radius: 0.375rem;
  object-fit: cover;
  background-color: #f9fafb;
}

.dark .search-results-state img {
  background-color: #1f2937;
}

/* 标签样式 */
.search-results-state .bg-blue-50 {
  background-color: #eff6ff;
}

.search-results-state .text-blue-700 {
  color: #1d4ed8;
}

.dark .search-results-state .bg-blue-900\/30 {
  background-color: rgba(30, 58, 138, 0.3);
}

.dark .search-results-state .text-blue-400 {
  color: #60a5fa;
}

/* 分页控件样式 */
.search-results-state button:disabled {
  cursor: not-allowed;
}

/* 键盘快捷键样式 */
kbd {
  font-family: SFMono-Regular, Menlo, Monaco, Consolas, monospace;
  font-size: 0.75rem;
  line-height: 1.25;
  padding: 0.125rem 0.375rem;
  background-color: #f3f4f6;
  border: 1px solid #e5e7eb;
  border-radius: 0.25rem;
  box-shadow: 0 1px 2px 0 rgb(0 0 0 / 0.05);
  color: #1f2937;
}

.dark kbd {
  background-color: #374151;
  border-color: #4b5563;
  color: #d1d5db;
  box-shadow: 0 1px 2px 0 rgb(0 0 0 / 0.2);
}

/* 滚动条样式优化 */
.search-results-state::-webkit-scrollbar,
.search-no-results::-webkit-scrollbar,
.search-initial-state::-webkit-scrollbar,
.search-loading-state::-webkit-scrollbar {
  width: 6px;
}

.search-results-state::-webkit-scrollbar-track,
.search-no-results::-webkit-scrollbar-track,
.search-initial-state::-webkit-scrollbar-track,
.search-loading-state::-webkit-scrollbar-track {
  background: transparent;
}

.search-results-state::-webkit-scrollbar-thumb,
.search-no-results::-webkit-scrollbar-thumb,
.search-initial-state::-webkit-scrollbar-thumb,
.search-loading-state::-webkit-scrollbar-thumb {
  background-color: #d1d5db;
  border-radius: 3px;
}

.dark .search-results-state::-webkit-scrollbar-thumb,
.dark .search-no-results::-webkit-scrollbar-thumb,
.dark .search-initial-state::-webkit-scrollbar-thumb,
.dark .search-loading-state::-webkit-scrollbar-thumb {
  background-color: #4b5563;
}
</style>
