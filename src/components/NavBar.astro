---
const { title } = Astro.props;
import { themeConfig } from '../../starread.config';
import Search from "./Search.astro";
---

<header id="navbar" class="bg-white/70 backdrop-blur-xl border border-white/20 shadow-[0_1px_0_0_rgba(255,255,255,0.6)_inset,0_8px_30px_rgba(0,0,0,0.06)] dark:bg-cyan-950/30 bg-white/5 dark:backdrop-blur-xl dark:border dark:border-cyan-600/20 shadow-sm sticky top-0 z-50 transition-all duration-300 backdrop-blur-md" client:load>
  <!-- 移除移动端主题切换按钮 -->
  <div class="container mx-auto px-4 py-3 flex items-center justify-between">
    <div class="flex items-center space-x-2 nav-content">
      <div id="logo-container">
        <a href="/" class="block">
          {themeConfig.site.logo.image ? (
            <img 
              src={themeConfig.site.logo.image} 
              alt={themeConfig.site.logo.alt} 
              class="h-8 w-auto logo-image" 
              data-light-src={themeConfig.site.logo.image} 
              data-dark-src={themeConfig.site.logo.darkImage} 
            /> 
          ) : (
            <span class="font-bold text-xl nav-logo-text">{themeConfig.site.logo.text}</span>
          )}
        </a>
      </div>
    </div>
    <div class="article-title text-lg font-medium overflow-hidden whitespace-nowrap text-ellipsis w-full md:w-auto text-center md:text-left">
      { title || themeConfig.site.title }
    </div>

    <!-- 导航菜单 -->
    <nav class="hidden md:flex items-center space-x-6">
      {themeConfig.navbar.map((item) => (
        <div class="relative group" key={item.text || item.name}>
          {item.items ? (
            // 下拉菜单
            <button class="nav-link transition-colors flex items-center space-x-2.5 p-2 group-hover:bg-gray-100 dark:group-hover:bg-gray-800 rounded-md">
              {item.icon && (
                <span class="nav-icon w-5 h-5 flex-shrink-0">
                  <span class={`${item.icon} h-5 w-5`}></span>
                </span>
              )}
              <span>{item.name}</span>
              <span class="icon-[lucide--chevron-down] w-5 h-5 ml-1"></span>
            </button>
          ) : (
            // 普通链接
            <a href={item.href} class="nav-link transition-colors flex items-center space-x-2.5 p-2 hover:bg-gray-100 dark:hover:bg-gray-800 rounded-md">
              {item.icon && (
                <span class="nav-icon w-5 h-5 flex-shrink-0">
                  <span class={`${item.icon} h-5 w-5`}></span>
                </span>
              )}
              <span>{item.text || item.name}</span>
            </a>
          )}

          {/* 下拉菜单内容 */}
          {item.items && (
            <div class="absolute right-0 mt-2 w-48 bg-white dark:bg-cyan-950 shadow-lg rounded-md z-10 invisible opacity-0 group-hover:visible group-hover:opacity-100 transition-all duration-200 origin-top-right">
              {item.items.map((subItem) => (
                <div key={subItem.text || subItem.items?.[0]?.text} class="py-1 first:pt-2 last:pb-2">
                  {subItem.text && (
                    <span class="block px-4 py-2 text-xs font-semibold text-gray-500 dark:text-gray-400 uppercase tracking-wider">
                      {subItem.text}
                    </span>
                  )}
                  {subItem.icon && !subItem.text && (
                    <span class="block px-4 py-2 text-xs font-semibold text-gray-500 dark:text-gray-400 uppercase tracking-wider flex items-center">
                      <span class="nav-icon w-5 h-5 mr-2 flex-shrink-0">
                        <span class={`${subItem.icon} h-5 w-5`}></span>
                      </span>
                      <span>{subItem.icon}</span>
                    </span>
                  )}
                  {subItem.items && subItem.items.map((subSubItem) => (
                    <a
                      href={subSubItem.link}
                      class="block px-4 py-2 text-sm hover:bg-gray-100 dark:hover:bg-gray-800 transition-colors"
                      key={subSubItem.text}
                    >
                      {subSubItem.icon && (
                        <span class="nav-icon w-5 h-5 mr-2 flex-shrink-0">
                          <span class={`${subSubItem.icon} h-5 w-5`}></span>
                        </span>
                      )}
                      {subSubItem.text}
                    </a>
                  ))}
                </div>
              ))}
            </div>
          )}
        </div>
      ))}
    </nav>
    <!-- 搜索和登录 -->
    <div class="flex items-center space-x-4">
      <Search />
      <button class="hidden md:block rounded-lg bg-primary text-white hover:bg-primary/70 active:bg-primary/80
                   focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-sky-400/60 dark:bg-secondary dark:text-slate-950 dark:hover:bg-secondary/70 dark:active:bg-secondary/60
                   dark:focus-visible:ring-sky-300/50 px-4 py-2 rounded-md transition-colors">登录</button>
      <button id="mobile-menu-toggle" class="md:hidden p-2 rounded-full hover:bg-gray-100 dark:hover:bg-gray-800 transition-colors">
        <span class="icon-[lucide--menu] h-5 w-5 nav-menu-icon"></span>
      </button>
    </div>
  </div>
</header>

<!-- 移动端侧边栏 -->
<div id="mobile-sidebar" class="fixed inset-0 z-50 hidden md:hidden">
  <div class="fixed inset-0 bg-black/10 backdrop-blur-sm" id="mobile-sidebar-overlay"></div>
  <div class="fixed right-0 top-0 h-full w-64 bg-white dark:bg-gray-900 shadow-xl transform translate-x-full transition-transform duration-300 ease-in-out" id="mobile-sidebar-content">
    <div class="p-4 border-b dark:border-gray-700">
      <div class="flex items-center justify-between">
        <h3 class="font-semibold text-lg">菜单</h3>
        <button id="mobile-sidebar-close" class="p-2 rounded-full hover:bg-gray-100 dark:hover:bg-gray-800">
          <span class="icon-[lucide--x] h-5 w-5"></span>
        </button>
      </div>
    </div>
    <nav class="p-4 space-y-2">
      <!-- 移动端搜索按钮 -->
      <div class="p-3">
        <Search />
      </div>
      {themeConfig.navbar.map((item) => (
        <div key={item.name}>
          {item.href ? (
            <a href={item.href} class="flex items-center space-x-3 p-3 rounded-lg hover:bg-gray-100 dark:hover:bg-gray-800 transition-colors">
              {item.icon && <span class={`${item.icon} h-5 w-5`}></span>}
              <span>{item.name}</span>
            </a>
          ) : (
            <div class="p-3">
              <div class="flex items-center space-x-3 mb-2">
                {item.icon && <span class={`${item.icon} h-5 w-5`}></span>}
                <span class="font-medium">{item.name}</span>
              </div>
              {item.items && item.items.map((subItem) => (
                <div key={subItem.text} class="ml-8 space-y-1">
                  {subItem.text && <div class="text-sm text-gray-600 dark:text-gray-400 py-1">{subItem.text}</div>}
                  {subItem.items && subItem.items.map((subSubItem) => (
                    <a key={subSubItem.text} href={subSubItem.link} class="block py-1 text-sm text-gray-700 dark:text-gray-300 hover:text-blue-600 dark:hover:text-blue-400">
                      {subSubItem.text}
                    </a>
                  ))}
                </div>
              ))}
            </div>
          )}
        </div>
      ))}
    </nav>
  </div>
</div>

<style>
  /* 导航栏滚动效果样式 */
  .article-title {
    display: none;
  }

  /* 向下滚动时显示文章标题，隐藏导航 */
  header.show-title .nav-content, 
  header.show-title nav {
    display: none;
  }

  header.show-title .article-title {
    display: block;
  }

  /* 向上滚动时完全隐藏导航栏 */
  header.hide-nav {
    transform: translateY(-100%);
  }

  .nav-icon {
    display: inline-flex;
    align-items: center;
    justify-content: center;
  }

  /* Iconify 图标样式 */
  [class^="icon-"] {
    display: inline-block;
    width: 1em;
    height: 1em;
    background-size: contain;
    background-repeat: no-repeat;
    background-position: center;
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    // logo根据主题同步切换功能
    const updateLogo = () => {
      const htmlElement = document.documentElement;
      const logoImages = document.querySelectorAll('.logo-image');
      const isDarkMode = htmlElement.classList.contains('dark');
      
      logoImages.forEach(logoImage => {
        if (logoImage && logoImage.dataset.darkSrc && logoImage.dataset.lightSrc) {
          const newSrc = isDarkMode ? logoImage.dataset.darkSrc : logoImage.dataset.lightSrc;
          // 使用requestAnimationFrame确保DOM更新完成
          requestAnimationFrame(() => {
            if (logoImage.src !== newSrc) {
              logoImage.src = newSrc;
            }
          });
        }
      });
    };

    // 监听主题变化
    const htmlElement = document.documentElement;
    const observer = new MutationObserver((mutations) => {
      mutations.forEach((mutation) => {
        if (mutation.attributeName === 'class') {
          updateLogo();
        }
      });
    });

    observer.observe(htmlElement, { 
      attributes: true, 
      attributeFilter: ['class'] 
    });

    // 初始化时更新一次logo
    updateLogo();
    // 移除可能导致冲突的旧搜索逻辑
    // 搜索相关功能现在由导入的组件内部处理

    // 导航栏滚动逻辑
    let lastScrollY = window.scrollY;
    let ticking = false;

    function handleScroll() {
      const navbar = document.getElementById('navbar');
      if (!navbar) return;

      const currentScrollY = window.scrollY;
      
      // 向下滚动时显示标题
      if (currentScrollY > lastScrollY && currentScrollY > 100) {
        navbar.classList.add('show-title');
        navbar.classList.remove('hide-nav');
      } 
      // 向上滚动时显示完整导航栏
      else if (currentScrollY < lastScrollY) {
        navbar.classList.remove('show-title');
        navbar.classList.remove('hide-nav');
      }
      
      // 滚动到顶部时重置
      if (currentScrollY <= 10) {
        navbar.classList.remove('show-title');
        navbar.classList.remove('hide-nav');
      }

      lastScrollY = currentScrollY;
      ticking = false;
    }

    window.addEventListener('scroll', () => {
      if (!ticking) {
        window.requestAnimationFrame(handleScroll);
        ticking = true;
      }
    });

    // 移动端侧边栏交互
    const mobileMenuToggle = document.getElementById('mobile-menu-toggle');
    const mobileSidebar = document.getElementById('mobile-sidebar');
    const mobileSidebarOverlay = document.getElementById('mobile-sidebar-overlay');
    const mobileSidebarClose = document.getElementById('mobile-sidebar-close');
    const mobileSidebarContent = document.getElementById('mobile-sidebar-content');

    if (mobileMenuToggle && mobileSidebar) {
      // 打开侧边栏
      mobileMenuToggle.addEventListener('click', () => {
        mobileSidebar.classList.remove('hidden');
        setTimeout(() => {
          mobileSidebarOverlay.classList.add('opacity-100');
          mobileSidebarContent.classList.remove('translate-x-full');
        }, 10);
        document.body.classList.add('overflow-hidden');
      });

      // 关闭侧边栏
      const closeSidebar = () => {
        mobileSidebarContent.classList.add('translate-x-full');
        mobileSidebarOverlay.classList.remove('opacity-100');
        setTimeout(() => {
          mobileSidebar.classList.add('hidden');
          document.body.classList.remove('overflow-hidden');
        }, 300);
      };

      if (mobileSidebarClose) mobileSidebarClose.addEventListener('click', closeSidebar);
      if (mobileSidebarOverlay) mobileSidebarOverlay.addEventListener('click', closeSidebar);

      // ESC键关闭侧边栏
      document.addEventListener('keydown', (e) => {
        if (e.key === 'Escape' && !mobileSidebar.classList.contains('hidden')) {
          closeSidebar();
        }
      });

      // 侧边栏链接点击后关闭
      const sidebarLinks = mobileSidebar.querySelectorAll('a');
      sidebarLinks.forEach(link => {
        link.addEventListener('click', closeSidebar);
      });
    }
  });
</script>