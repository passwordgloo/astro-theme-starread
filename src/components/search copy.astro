---
import { themeConfig } from '../../starread.config';

// 将环境变量传递给客户端
const algoliaConfig = {
  appId: import.meta.env.PUBLIC_ALGOLIA_APP_ID || '',
  apiKey: import.meta.env.PUBLIC_ALGOLIA_SEARCH_KEY || '',
  indexName: import.meta.env.PUBLIC_ALGOLIA_INDEX_NAME || ''
};

// 检查配置是否完整
const hasCompleteConfig = Boolean(
  algoliaConfig.appId && 
  algoliaConfig.apiKey && 
  algoliaConfig.indexName
);

if (hasCompleteConfig) {
  console.log('✅ Algolia配置完整', {
    appId: algoliaConfig.appId,
    indexName: algoliaConfig.indexName
  });
} else {
  console.warn('⚠️ Algolia配置不完整');
}
---

<div class="docsearch-container">
  <!-- 搜索按钮触发器 -->
  <button 
    id="search-toggle"
    class="p-2 rounded-full hover:bg-gray-100 dark:hover:bg-gray-800 transition-colors focus:outline-none"
    aria-label="搜索"
  >
    <span class="icon-[lucide--search] h-5 w-5 text-gray-700 dark:text-gray-300"></span>
  </button>

  <!-- 搜索弹窗 -->
  <div 
    id="search-modal" 
    class="fixed inset-0 z-50 flex items-start justify-center pt-16 px-4 bg-black/60 hidden"
  >
    <div 
      class="w-full max-w-2xl bg-white dark:bg-gray-900 rounded-lg shadow-xl overflow-hidden flex flex-col"
    >
      <!-- 搜索头部 -->
      <div class="p-4 border-b dark:border-gray-800 flex items-center justify-between">
        <div class="relative w-full">
          <span class="absolute left-3 top-1/2 -translate-y-1/2 text-gray-400">
            <span class="icon-[lucide--search] h-5 w-5"></span>
          </span>
          <input
            id="search-input"
            type="text"
            placeholder="搜索文档 (⌘K)"
            class="w-full pl-10 pr-4 py-2 bg-gray-50 dark:bg-gray-800 border-0 rounded-md text-gray-900 dark:text-white text-base focus:ring-2 focus:ring-blue-500 outline-none"
          />
        </div>
        <button 
          id="search-close"
          class="ml-2 p-2 text-gray-400 hover:text-gray-600 dark:hover:text-gray-300 rounded-full hover:bg-gray-100 dark:hover:bg-gray-800 transition-colors"
          aria-label="关闭"
        >
          <span class="icon-[lucide--x] h-5 w-5"></span>
        </button>
      </div>

      <!-- 搜索内容区 -->
      <div class="flex-1 overflow-y-auto max-h-[60vh]">
        <!-- 初始状态 -->
        <div id="search-initial" class="search-initial-state">
          <div class="text-center py-12">
            <div class="inline-flex items-center justify-center w-16 h-16 mb-4 rounded-full bg-blue-100 dark:bg-blue-900/30">
              <span class="icon-[lucide--search] h-8 w-8 text-blue-600 dark:text-blue-400"></span>
            </div>
            <h3 class="text-lg font-medium text-gray-900 dark:text-white mb-2">搜索文档</h3>
            <p class="text-gray-500 dark:text-gray-400 max-w-md mx-auto">
              输入关键词搜索文档内容，支持使用键盘进行导航
            </p>
            <div class="mt-6 flex justify-center space-x-3">
              <kbd class="px-2 py-1 bg-gray-200 dark:bg-gray-700 rounded text-gray-700 dark:text-gray-300 text-xs">⌘K</kbd>
              <span class="text-gray-500 dark:text-gray-400 text-sm">打开搜索</span>
            </div>
            <!-- 连接测试 -->
            <button 
              id="test-connection-btn" 
              class="mt-4 px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600 transition-colors"
            >
              测试 Algolia 连接
            </button>
            <div id="connection-result" class="mt-4 hidden"></div>
          </div>
        </div>

        <!-- 加载状态 -->
        <div id="search-loading" class="search-loading-state hidden">
          <div class="text-center py-10">
            <div class="inline-block animate-spin rounded-full h-8 w-8 border-4 border-gray-200 dark:border-gray-700 border-t-blue-500 mb-4"></div>
            <p class="text-gray-500 dark:text-gray-400">正在搜索...</p>
          </div>
        </div>

        <!-- 搜索结果 -->
        <div id="search-results" class="search-results-state hidden">
          <div class="search-results-header border-b dark:border-gray-800 px-4 py-2 flex justify-between items-center text-xs text-gray-500 dark:text-gray-400">
            <span id="search-results-count">找到 0 个结果</span>
            <span class="text-xs" id="search-query"></span>
          </div>
          <div class="p-2 space-y-1" id="search-results-list">
            <!-- 搜索结果将通过JavaScript动态添加 -->
          </div>
          
          <!-- 分页控件 -->
          <div id="search-pagination" class="mt-3 pb-3 flex justify-center items-center gap-2 hidden">
            <button id="prev-page" class="px-3 py-1 rounded bg-gray-100 dark:bg-gray-800 hover:bg-gray-200 dark:hover:bg-gray-700 disabled:opacity-50 disabled:cursor-not-allowed" disabled>
              <span class="icon-[lucide--chevron-left] h-4 w-4"></span>
            </button>
            <div id="page-numbers" class="flex gap-1">
              <!-- 页码按钮将动态生成 -->
            </div>
            <button id="next-page" class="px-3 py-1 rounded bg-gray-100 dark:bg-gray-800 hover:bg-gray-200 dark:hover:bg-gray-700 disabled:opacity-50 disabled:cursor-not-allowed">
              <span class="icon-[lucide--chevron-right] h-4 w-4"></span>
            </button>
          </div>
        </div>

        <!-- 无结果状态 -->
        <div id="search-no-results" class="search-no-results hidden">
          <div class="text-center py-12 px-4">
            <div class="inline-flex items-center justify-center w-16 h-16 mb-4 rounded-full bg-gray-100 dark:bg-gray-800">
              <span class="icon-[lucide--circle-help] h-8 w-8 text-gray-500 dark:text-gray-400"></span>
            </div>
            <h3 class="text-lg font-medium text-gray-900 dark:text-white mb-2">未找到结果</h3>
            <p class="text-gray-500 dark:text-gray-400 max-w-md mx-auto">
              没有找到与 "<span id="search-no-results-query" class="font-medium"></span>" 相关的内容，请尝试其他关键词
            </p>
            <div class="mt-4">
              <button 
                id="search-clear"
                class="px-3 py-1.5 text-sm bg-gray-100 hover:bg-gray-200 dark:bg-gray-800 dark:hover:bg-gray-700 rounded-md text-gray-700 dark:text-gray-300 transition-colors"
              >
                清除搜索
              </button>
            </div>
          </div>
        </div>
      </div>

      <!-- 底部提示 -->
      <div class="p-3 bg-gray-50 dark:bg-gray-800 border-t dark:border-gray-700 flex flex-wrap items-center justify-between text-xs text-gray-500 dark:text-gray-400 gap-2">
        <div class="flex flex-wrap items-center gap-x-4 gap-y-1">
          <div class="flex items-center gap-1">
            <kbd class="px-2 py-1 bg-gray-200 dark:bg-gray-700 rounded text-gray-700 dark:text-gray-300">⌘K</kbd>
            <span>打开搜索</span>
          </div>
          <div class="flex items-center gap-1">
            <kbd class="px-2 py-1 bg-gray-200 dark:bg-gray-700 rounded text-gray-700 dark:text-gray-300">↓</kbd>
            <kbd class="px-2 py-1 bg-gray-200 dark:bg-gray-700 rounded text-gray-700 dark:text-gray-300">↑</kbd>
            <span>浏览结果</span>
          </div>
          <div class="flex items-center gap-1">
            <kbd class="px-2 py-1 bg-gray-200 dark:bg-gray-700 rounded text-gray-700 dark:text-gray-300">Enter</kbd>
            <span>选择</span>
          </div>
          <div class="flex items-center gap-1">
            <kbd class="px-2 py-1 bg-gray-200 dark:bg-gray-700 rounded text-gray-700 dark:text-gray-300">Esc</kbd>
            <span>关闭</span>
          </div>
        </div>
        <div class="flex items-center gap-1">
          <span id="search-provider">本地搜索</span>
        </div>
      </div>
    </div>
  </div>
</div>

<!-- 引入 Algolia 客户端 -->
<script is:inline src="https://cdn.jsdelivr.net/npm/algoliasearch@4/dist/algoliasearch-lite.umd.js"></script>

<script define:vars={{ algoliaConfig }}>
  (function() {
    if (window.__searchInitialized) return;
    window.__searchInitialized = true;

    // DOM 元素
    const searchToggle = document.getElementById('search-toggle');
    const searchModal = document.getElementById('search-modal');
    const searchInput = document.getElementById('search-input');
    const searchClose = document.getElementById('search-close');
    const searchClear = document.getElementById('search-clear');
    const initialState = document.getElementById('search-initial');
    const loadingState = document.getElementById('search-loading');
    const resultsState = document.getElementById('search-results');
    const noResultsState = document.getElementById('search-no-results');
    const resultsList = document.getElementById('search-results-list');
    const resultsCount = document.getElementById('search-results-count');
    const searchQueryDisplay = document.getElementById('search-query');
    const noResultsQuery = document.getElementById('search-no-results-query');
    const paginationContainer = document.getElementById('search-pagination');
    const prevPageBtn = document.getElementById('prev-page');
    const nextPageBtn = document.getElementById('next-page');
    const pageNumbers = document.getElementById('page-numbers');
    const searchProvider = document.getElementById('search-provider');
    const testConnectionBtn = document.getElementById('test-connection-btn');
    const connectionResult = document.getElementById('connection-result');

    let searchClient = null;
    let searchIndex = null;
    let isOpen = false;
    let currentQuery = '';
    let currentPage = 0;
    let totalPages = 0;
    let totalHits = 0;
    let currentResultIndex = -1;
    let searchTimeout = null;
    const hitsPerPage = 10;

    // 检查配置
    const hasConfig = Boolean(
      algoliaConfig.appId && 
      algoliaConfig.apiKey && 
      algoliaConfig.indexName
    );

    console.log('客户端 Algolia 配置:', {
      appId: algoliaConfig.appId,
      hasApiKey: Boolean(algoliaConfig.apiKey),
      indexName: algoliaConfig.indexName,
      isComplete: hasConfig
    });

    // 初始化 Algolia 客户端
    function initializeAlgolia() {
      if (!hasConfig) {
        console.warn('Algolia 配置不完整');
        return false;
      }

      try {
        searchClient = algoliasearch(
          algoliaConfig.appId,
          algoliaConfig.apiKey
        );
        searchIndex = searchClient.initIndex(algoliaConfig.indexName);
        
        searchProvider.innerHTML = '由 <span class="text-blue-500 font-medium">Algolia</span> 提供支持';
        console.log('✅ Algolia 客户端初始化成功');
        return true;
      } catch (error) {
        console.error('❌ Algolia 初始化失败:', error);
        return false;
      }
    }

    // 高亮搜索词
    function highlightText(text, query) {
      if (!query || !text) return text;
      
      const regex = new RegExp(`(${query})`, 'gi');
      return text.replace(regex, '<mark class="bg-yellow-200 dark:bg-yellow-700 text-gray-900 dark:text-white font-medium">\$1</mark>');
    }

// 渲染搜索结果
function renderResults(hits) {
  resultsList.innerHTML = '';
  
  hits.forEach((hit, index) => {
    const div = document.createElement('div');
    div.className = 'search-result-item p-3 rounded-md hover:bg-gray-50 dark:hover:bg-gray-800 cursor-pointer transition-colors border-l-2 border-transparent';
    div.dataset.index = index;
    div.dataset.url = hit.url || hit.objectID;
    
    // 使用 Algolia 的高亮数据（如果有）
    const title = hit._highlightResult?.title?.value || hit.title || '无标题';
    const content = hit._snippetResult?.content?.value || hit._highlightResult?.content?.value || hit.content || '';
    
    // 获取封面图片
    const coverUrl = hit.cover || hit.image || '';
    
    div.innerHTML = `
      <div class="flex gap-3">
        ${coverUrl ? `
          <div class="flex-shrink-0">
            <img 
              src="${coverUrl}" 
              alt="${hit.title || '封面'}"
              class="w-20 h-20 object-cover rounded-md"
              onerror="this.style.display='none'"
            />
          </div>
        ` : `
          <div class="flex-shrink-0 w-20 h-20 bg-gray-100 dark:bg-gray-800 rounded-md flex items-center justify-center">
            <span class="icon-[lucide--file-text] h-8 w-8 text-gray-400"></span>
          </div>
        `}
        
        <div class="flex-1 min-w-0">
          <h4 class="font-medium text-gray-900 dark:text-white mb-1 line-clamp-1">
            ${title}
          </h4>
          <p class="text-sm text-gray-600 dark:text-gray-400 line-clamp-2 mb-1">
            ${content}
          </p>
          ${hit.url ? `
            <span class="text-xs text-blue-500 hover:text-blue-600 inline-flex items-center gap-1">
              查看详情
              <span class="icon-[lucide--arrow-right] h-3 w-3"></span>
            </span>
          ` : ''}
        </div>
      </div>
    `;
    
    // 点击事件
    div.addEventListener('click', () => {
      if (hit.url) {
        window.location.href = hit.url;
      }
    });
    
    // 鼠标悬停事件
    div.addEventListener('mouseenter', () => {
      setActiveResult(index);
    });
    
    resultsList.appendChild(div);
  });
}

    // 设置活动结果
    function setActiveResult(index) {
      const items = resultsList.querySelectorAll('.search-result-item');
      items.forEach((item, i) => {
        if (i === index) {
          item.classList.add('bg-gray-100', 'dark:bg-gray-800', 'border-blue-500');
          currentResultIndex = index;
          // 滚动到可见区域
          item.scrollIntoView({ block: 'nearest', behavior: 'smooth' });
        } else {
          item.classList.remove('bg-gray-100', 'dark:bg-gray-800', 'border-blue-500');
        }
      });
    }

    // 渲染分页
    function renderPagination() {
      if (totalPages <= 1) {
        paginationContainer.classList.add('hidden');
        return;
      }

      paginationContainer.classList.remove('hidden');
      pageNumbers.innerHTML = '';

      // 上一页按钮状态
      prevPageBtn.disabled = currentPage === 0;
      
      // 下一页按钮状态
      nextPageBtn.disabled = currentPage >= totalPages - 1;

      // 页码按钮（最多显示7个）
      const maxButtons = 7;
      let startPage = Math.max(0, currentPage - Math.floor(maxButtons / 2));
      let endPage = Math.min(totalPages - 1, startPage + maxButtons - 1);
      
      if (endPage - startPage < maxButtons - 1) {
        startPage = Math.max(0, endPage - maxButtons + 1);
      }

      // 第一页
      if (startPage > 0) {
        addPageButton(0);
        if (startPage > 1) {
          pageNumbers.appendChild(createEllipsis());
        }
      }

      // 中间页码
      for (let i = startPage; i <= endPage; i++) {
        addPageButton(i);
      }

      // 最后一页
      if (endPage < totalPages - 1) {
        if (endPage < totalPages - 2) {
          pageNumbers.appendChild(createEllipsis());
        }
        addPageButton(totalPages - 1);
      }
    }

    function addPageButton(pageNum) {
      const button = document.createElement('button');
      button.textContent = pageNum + 1;
      button.className = `px-3 py-1 rounded text-sm transition-colors ${
        pageNum === currentPage
          ? 'bg-blue-500 text-white'
          : 'bg-gray-100 dark:bg-gray-800 hover:bg-gray-200 dark:hover:bg-gray-700 text-gray-700 dark:text-gray-300'
      }`;
      
      button.addEventListener('click', () => {
        currentPage = pageNum;
        performSearch(currentQuery);
      });
      
      pageNumbers.appendChild(button);
    }

    function createEllipsis() {
      const span = document.createElement('span');
      span.textContent = '...';
      span.className = 'px-2 text-gray-500';
      return span;
    }

    // 执行搜索
    async function performSearch(query) {
      if (!searchIndex) {
        console.warn('搜索索引未初始化');
        return;
      }

      currentQuery = query;

      // 空查询显示初始状态
      if (!query.trim()) {
        showInitialState();
        return;
      }

      // 显示加载状态
      showLoadingState();

      try {
        const result = await searchIndex.search(query, {
          page: currentPage,
          hitsPerPage: hitsPerPage,
          attributesToSnippet: ['content:30'],
          snippetEllipsisText: '...',
        });

        totalHits = result.nbHits;
        totalPages = result.nbPages;

        console.log('搜索结果:', {
          query,
          page: currentPage + 1,
          totalPages,
          totalHits,
          hits: result.hits.length
        });

        if (result.hits.length > 0) {
          showResultsState(result.hits, query);
        } else {
          showNoResultsState(query);
        }
      } catch (error) {
        console.error('搜索失败:', error);
        showNoResultsState(query);
      }
    }

    // 状态切换函数
    function showInitialState() {
      initialState.classList.remove('hidden');
      loadingState.classList.add('hidden');
      resultsState.classList.add('hidden');
      noResultsState.classList.add('hidden');
      currentResultIndex = -1;
    }

    function showLoadingState() {
      initialState.classList.add('hidden');
      loadingState.classList.remove('hidden');
      resultsState.classList.add('hidden');
      noResultsState.classList.add('hidden');
    }

    function showResultsState(hits, query) {
      initialState.classList.add('hidden');
      loadingState.classList.add('hidden');
      resultsState.classList.remove('hidden');
      noResultsState.classList.add('hidden');

      resultsCount.textContent = `找到 ${totalHits} 个结果`;
      searchQueryDisplay.textContent = `"${query}"`;
      
      renderResults(hits);
      renderPagination();
      currentResultIndex = -1;
    }

    function showNoResultsState(query) {
      initialState.classList.add('hidden');
      loadingState.classList.add('hidden');
      resultsState.classList.add('hidden');
      noResultsState.classList.remove('hidden');

      noResultsQuery.textContent = query;
    }

    // 测试连接
    async function testConnection() {
      if (!hasConfig) {
        showConnectionResult('error', '配置不完整', 'appId、apiKey 或 indexName 缺失');
        return;
      }

      showConnectionResult('loading', '正在测试连接...');

      try {
        if (!searchClient) {
          initializeAlgolia();
        }

        const startTime = Date.now();
        const result = await searchIndex.search('', { hitsPerPage: 0 });
        const responseTime = Date.now() - startTime;

        showConnectionResult(
          'success',
          '连接成功！',
          `索引「${algoliaConfig.indexName}」包含 ${result.nbHits} 条记录，响应时间: ${responseTime}ms`
        );

        console.log('🎉 Algolia 连接测试成功:', {
          indexName: algoliaConfig.indexName,
          totalRecords: result.nbHits,
          responseTime: `${responseTime}ms`
        });
      } catch (error) {
        let errorMsg = '未知错误';
        let errorDetail = error.message;

        if (error.status === 403) {
          errorMsg = '认证失败';
          errorDetail = 'API Key 或 App ID 无效';
        } else if (error.status === 404) {
          errorMsg = '索引未找到';
          errorDetail = `索引「${algoliaConfig.indexName}」不存在`;
        }

        showConnectionResult('error', errorMsg, errorDetail);
        console.error('❌ Algolia 连接测试失败:', error);
      }
    }

    function showConnectionResult(status, message, detail = '') {
      connectionResult.classList.remove('hidden');
      
      const icons = {
        loading: '<span class="icon-[lucide--loader-2] h-5 w-5 text-blue-500 animate-spin"></span>',
        success: '<span class="icon-[lucide--check-circle] h-5 w-5 text-green-500"></span>',
        error: '<span class="icon-[lucide--alert-circle] h-5 w-5 text-red-500"></span>'
      };

      const colors = {
        loading: 'bg-blue-50 dark:bg-blue-900/20 border-blue-200 dark:border-blue-800',
        success: 'bg-green-50 dark:bg-green-900/20 border-green-200 dark:border-green-800',
        error: 'bg-red-50 dark:bg-red-900/20 border-red-200 dark:border-red-800'
      };

      connectionResult.className = `mt-4 p-4 rounded-md border ${colors[status]}`;
      connectionResult.innerHTML = `
        <div class="flex items-start gap-3">
          ${icons[status]}
          <div class="flex-1">
            <p class="font-medium text-gray-900 dark:text-white">${message}</p>
            ${detail ? `<p class="text-sm text-gray-600 dark:text-gray-400 mt-1">${detail}</p>` : ''}
          </div>
        </div>
      `;
    }

    // 打开/关闭搜索
    function openSearch() {
      isOpen = true;
      searchModal.classList.remove('hidden');
      document.body.style.overflow = 'hidden';
      searchInput.focus();
      showInitialState();
    }

    function closeSearch() {
      isOpen = false;
      searchModal.classList.add('hidden');
      document.body.style.overflow = '';
      searchInput.value = '';
      currentPage = 0;
      currentQuery = '';
      showInitialState();
    }

    // 搜索输入处理（防抖）
    searchInput.addEventListener('input', (e) => {
      clearTimeout(searchTimeout);
      const query = e.target.value.trim();
      
      if (!query) {
        showInitialState();
        return;
      }

      searchTimeout = setTimeout(() => {
        currentPage = 0; // 新搜索重置页码
        performSearch(query);
      }, 300);
    });

    // 键盘导航
    searchInput.addEventListener('keydown', (e) => {
      const items = resultsList.querySelectorAll('.search-result-item');
      
      if (e.key === 'ArrowDown') {
        e.preventDefault();
        if (items.length > 0) {
          currentResultIndex = Math.min(currentResultIndex + 1, items.length - 1);
          setActiveResult(currentResultIndex);
        }
      } else if (e.key === 'ArrowUp') {
        e.preventDefault();
        if (items.length > 0) {
          currentResultIndex = Math.max(currentResultIndex - 1, 0);
          setActiveResult(currentResultIndex);
        }
      } else if (e.key === 'Enter') {
        e.preventDefault();
        if (currentResultIndex >= 0 && items[currentResultIndex]) {
          items[currentResultIndex].click();
        }
      }
    });

    // 分页按钮事件
    prevPageBtn.addEventListener('click', () => {
      if (currentPage > 0) {
        currentPage--;
        performSearch(currentQuery);
      }
    });

    nextPageBtn.addEventListener('click', () => {
      if (currentPage < totalPages - 1) {
        currentPage++;
        performSearch(currentQuery);
      }
    });

    // 事件绑定
    searchToggle?.addEventListener('click', openSearch);
    searchClose?.addEventListener('click', closeSearch);
    searchClear?.addEventListener('click', () => {
      searchInput.value = '';
      showInitialState();
    });
    testConnectionBtn?.addEventListener('click', testConnection);
    
    searchModal?.addEventListener('click', (e) => {
      if (e.target === searchModal) closeSearch();
    });

    // 键盘快捷键
    document.addEventListener('keydown', (e) => {
      if ((e.ctrlKey || e.metaKey) && e.key === 'k') {
        e.preventDefault();
        isOpen ? closeSearch() : openSearch();
      }
      if (e.key === 'Escape' && isOpen) {
        closeSearch();
      }
    });

    // 初始化
    if (hasConfig) {
      initializeAlgolia();
      // 自动测试连接
      setTimeout(testConnection, 1000);
    } else {
      console.warn('⚠️ Algolia 配置不完整，搜索功能不可用');
      searchProvider.textContent = '搜索配置不完整';
    }
  })();
</script>

<style>
  /* 高亮样式 */
  mark {
    padding: 0 2px;
    border-radius: 2px;
  }

  /* 搜索结果项动画 */
  .search-result-item {
    animation: fadeIn 0.2s ease-in;
  }

  @keyframes fadeIn {
    from {
      opacity: 0;
      transform: translateY(-4px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  /* 滚动条样式 */
  .overflow-y-auto::-webkit-scrollbar {
    width: 6px;
  }

  .overflow-y-auto::-webkit-scrollbar-track {
    background: transparent;
  }

  .overflow-y-auto::-webkit-scrollbar-thumb {
    background: rgba(156, 163, 175, 0.5);
    border-radius: 3px;
  }

  .dark .overflow-y-auto::-webkit-scrollbar-thumb {
    background: rgba(75, 85, 99, 0.5);
  }
</style>
