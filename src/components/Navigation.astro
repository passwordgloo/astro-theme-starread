---
const { title } = Astro.props;
import { themeConfig } from '../content/config';
---

<header class="bg-white shadow-sm sticky top-0 z-50 transition-all duration-300">
  <!-- 确保深色模式切换按钮在移动设备上可见 -->
  <div class="md:hidden absolute right-4 top-3 z-10">
    <button id="mobile-theme-toggle" class="p-2 rounded-full hover:bg-gray-100 transition-colors">
      <span class="icon-[lucide--moon] h-5 w-5 nav-mobile-icon"></span>
    </button>
  </div>
  <div class="container mx-auto px-4 py-3 flex items-center justify-between">
    <div class="flex items-center space-x-2 nav-content">
      <div id="logo-container">
        {themeConfig.site.logo.image ? (
          <img 
            src={themeConfig.site.logo.image} 
            alt={themeConfig.site.logo.alt} 
            class="h-8 w-auto logo-image" 
            data-light-src={themeConfig.site.logo.image} 
            data-dark-src={themeConfig.site.logo.darkImage || themeConfig.site.logo.image} 
          /> 
        ) : (
          <span class="font-bold text-xl nav-logo-text">{themeConfig.site.logo.text}</span>
        )}
      </div>
    </div>
    <div class="article-title text-lg font-medium overflow-hidden whitespace-nowrap text-ellipsis w-full md:w-auto text-center md:text-left">
      { title || themeConfig.site.title }
    </div>

    <!-- 导航菜单 -->
    <nav class="hidden md:flex items-center space-x-6">
      {themeConfig.nav.map((item) => (
        <div class="relative group" key={item.text || item.name}>
          {item.items ? (
            // 下拉菜单
            <button class="nav-link transition-colors flex items-center space-x-2.5 p-2 group-hover:bg-gray-100 dark:group-hover:bg-gray-800 rounded-md">
              {item.icon && (
                <span class="nav-icon w-4 h-4 flex-shrink-0">
                  <span class={`${item.icon} h-4 w-4`}></span>
                </span>
              )}
              <span>{item.text || item.name}</span>
              <span class="icon-[lucide--chevron-down] w-4 h-4 ml-1"></span>
            </button>
          ) : (
            // 普通链接
            <a href={item.href} class="nav-link transition-colors flex items-center space-x-2.5 p-2 hover:bg-gray-100 dark:hover:bg-gray-800 rounded-md">
              {item.icon && (
                <span class="nav-icon w-4 h-4 flex-shrink-0">
                  <span class={`${item.icon} h-4 w-4`}></span>
                </span>
              )}
              <span>{item.text || item.name}</span>
            </a>
          )}

          {/* 下拉菜单内容 */}
          {item.items && (
            <div class="absolute right-0 mt-2 w-48 bg-white dark:bg-dark shadow-lg rounded-md z-10 invisible opacity-0 group-hover:visible group-hover:opacity-100 transition-all duration-200 origin-top-right">
              {item.items.map((subItem) => (
                <div key={subItem.text || subItem.items?.[0]?.text} class="py-1 first:pt-2 last:pb-2">
                  {subItem.text && (
                    <span class="block px-4 py-2 text-xs font-semibold text-gray-500 dark:text-gray-400 uppercase tracking-wider">
                      {subItem.text}
                    </span>
                  )}
                  {subItem.icon && !subItem.text && (
                    <span class="block px-4 py-2 text-xs font-semibold text-gray-500 dark:text-gray-400 uppercase tracking-wider flex items-center">
                      <span class="nav-icon w-4 h-4 mr-2 flex-shrink-0">
                        <span class={`${subItem.icon} h-4 w-4`}></span>
                      </span>
                      <span>{subItem.icon}</span>
                    </span>
                  )}
                  {subItem.items && subItem.items.map((subSubItem) => (
                    <a
                      href={subSubItem.link}
                      class="block px-4 py-2 text-sm hover:bg-gray-100 dark:hover:bg-gray-800 transition-colors"
                      key={subSubItem.text}
                    >
                      {subSubItem.icon && (
                        <span class="nav-icon w-4 h-4 mr-2 flex-shrink-0">
                          <span class={`${subSubItem.icon} h-4 w-4`}></span>
                        </span>
                      )}
                      {subSubItem.text}
                    </a>
                  ))}
                </div>
              ))}
            </div>
          )}
        </div>
      ))}
    </nav>
    <!-- 搜索和登录 -->
    <div class="flex items-center space-x-4">
      <button id="theme-toggle" class="p-2 rounded-full hover:bg-gray-100 dark:hover:bg-gray-800 transition-colors">
        <span class="icon-[lucide--moon] h-5 w-5 nav-theme-icon" id="theme-icon"></span>
      </button>
      <button class="hidden md:block px-4 py-2 bg-primary rounded-md hover:bg-primary/90 dark:bg-secondary dark:hover:bg-secondary/90 transition-colors">登录</button>
      <button class="md:hidden p-2 rounded-full hover:bg-gray-100 transition-colors">
        <span class="icon-[lucide--menu] h-6 w-6 nav-menu-icon"></span>
      </button>
    </div>
  </div>
</header>

<style>
  /* 导航栏滚动效果样式 */
  .article-title {
    display: none;
  }

  /* 向下滚动时显示文章标题，隐藏导航 */
  header.show-title .nav-content, 
  header.show-title nav, 
  header.show-title .flex.items-center.space-x-4:not(.nav-content) {
    display: none;
  }

  header.show-title .article-title {
    display: block;
  }

  .nav-icon {
    display: inline-flex;
    align-items: center;
    justify-content: center;
  }

  /* Iconify 图标样式 */
  [class^="icon-"] {
    display: inline-block;
    width: 1em;
    height: 1em;
    background-size: contain;
    background-repeat: no-repeat;
    background-position: center;
  }
</style>

<script>
  // 添加滚动监听事件，实现导航栏样式切换
  document.addEventListener('DOMContentLoaded', () => {
    const header = document.querySelector('header');
    let lastScrollTop = 0;

    // 初始化logo根据当前主题
    const logoImage = document.querySelector('.logo-image');
    const htmlElement = document.documentElement;
    if (logoImage) {
      const isDarkMode = htmlElement.classList.contains('dark');
      logoImage.src = isDarkMode ? logoImage.dataset.darkSrc : logoImage.dataset.lightSrc;
    }

    // 主题切换时更新logo
    const themeToggle = document.getElementById('theme-toggle');
    const mobileThemeToggle = document.getElementById('mobile-theme-toggle');

    const updateLogo = () => {
      const logoImage = document.querySelector('.logo-image');
      if (logoImage) {
        const isDarkMode = htmlElement.classList.contains('dark');
        logoImage.src = isDarkMode ? logoImage.dataset.darkSrc : logoImage.dataset.lightSrc;
      }
    };

    if (themeToggle) {
      themeToggle.addEventListener('click', updateLogo);
    }

    if (mobileThemeToggle) {
      mobileThemeToggle.addEventListener('click', updateLogo);
    }

    window.addEventListener('scroll', () => {
      const scrollTop = window.pageYOffset || document.documentElement.scrollTop;

      if (scrollTop > 100) {
        header.classList.add('show-title');
      } else {
        header.classList.remove('show-title');
      }

      lastScrollTop = scrollTop;
    });

    // 深色模式切换
    const themeToggleBtn = document.getElementById('theme-toggle');
    const mobileThemeToggleBtn = document.getElementById('mobile-theme-toggle');
    const themeIcon = document.getElementById('theme-icon');
    const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');

    // 检查用户偏好或系统设置
    const updateTheme = () => {
      if (localStorage.theme === 'dark' || (!('theme' in localStorage) && mediaQuery.matches)) {
        htmlElement.classList.add('dark');
        if (themeIcon) {
          themeIcon.className = 'icon-[lucide--sun] h-5 w-5 nav-theme-icon';
        }
      } else {
        htmlElement.classList.remove('dark');
        if (themeIcon) {
          themeIcon.className = 'icon-[lucide--moon] h-5 w-5 nav-theme-icon';
        }
      }
    };

    // 初始化主题
    updateTheme();

    // 监听主题切换事件
    if (themeToggleBtn) {
      themeToggleBtn.addEventListener('click', () => {
        if (htmlElement.classList.contains('dark')) {
          localStorage.theme = 'light';
        } else {
          localStorage.theme = 'dark';
        }
        updateTheme();
      });
    }

    if (mobileThemeToggleBtn) {
      mobileThemeToggleBtn.addEventListener('click', () => {
        if (htmlElement.classList.contains('dark')) {
          localStorage.theme = 'light';
        } else {
          localStorage.theme = 'dark';
        }
        updateTheme();
      });
    }

    // 监听系统主题变化
    mediaQuery.addEventListener('change', updateTheme);
  });
</script>