---
import { getEntryBySlug, getCollection } from 'astro:content';
import BaseLayout from '../../layouts/article.astro';
import { themeConfig } from '../../../starread.config';

export async function getStaticPaths() {
  const entries = await getCollection('articles');
  
  // 按日期排序文章
  const sortedEntries = [...entries].sort((a, b) => 
    new Date(a.data.date || 0).getTime() - new Date(b.data.date || 0).getTime()
  );
  
  return sortedEntries.map((entry, index) => {
    const prev = index > 0 ? sortedEntries[index - 1].slug : null;
    const next = index < sortedEntries.length - 1 ? sortedEntries[index + 1].slug : null;
    
    return {
      params: { slug: entry.slug },
      props: { 
        entry,
        prev,
        next
      },
    };
  });
}

// 日期格式化工具函数
export function formatDate(dateString?: string | Date): string {
  if (!dateString) {
    return new Date().toISOString().split('T')[0];
  }
  
  if (typeof dateString === 'string') {
    // 处理 "2024-01-01 12:00:00" 或 "2024-01-01T12:00:00.000Z" 格式
    const datePart = dateString.split(' ')[0] || dateString.split('T')[0];
    return datePart;
  }
  
  if (dateString instanceof Date) {
    return dateString.toISOString().split('T')[0];
  }
  
  return new Date().toISOString().split('T')[0];
}

// 封面图片处理工具函数
export function getCoverImage(cover?: string): string {
  return cover || themeConfig.site.defaultCover;
}

// 作者信息处理工具函数
export function getAuthorInfo(author?: { name?: string; avatar?: string }) {
  return {
    name: author?.name || themeConfig.author.name,
    avatar: author?.avatar || themeConfig.author.avatar
  };
}

// 文章排序工具函数
export function sortArticlesByDate(articles: any[]) {
  return [...articles].sort((a, b) => 
    new Date(b.data.date || 0).getTime() - new Date(a.data.date || 0).getTime()
  );
}

// 文章数据预处理工具函数
export function processArticleData(articles: any[]) {
  return articles.map(article => ({
    ...article,
    processed: {
      date: formatDate(article.data.date),
      cover: getCoverImage(article.data.cover),
      author: getAuthorInfo(article.data.author),
      categories: article.data.categories || [],
      tags: article.data.tags || [],
      views: article.data.views || 0
    }
  }));
}

// 获取相邻文章信息工具函数
export async function getAdjacentArticles(currentSlug: string) {
  const entries = await getCollection('articles');
  const sortedEntries = [...entries].sort((a, b) => 
    new Date(a.data.date || 0).getTime() - new Date(b.data.date || 0).getTime()
  );
  
  const currentIndex = sortedEntries.findIndex(entry => entry.slug === currentSlug);
  
  if (currentIndex === -1) {
    return { prev: null, next: null };
  }
  
  const prev = currentIndex > 0 ? sortedEntries[currentIndex - 1] : null;
  const next = currentIndex < sortedEntries.length - 1 ? sortedEntries[currentIndex + 1] : null;
  
  return {
    prev: prev ? {
      slug: prev.slug,
      title: prev.data.title,
      cover: getCoverImage(prev.data.cover),
      date: formatDate(prev.data.date)
    } : null,
    next: next ? {
      slug: next.slug,
      title: next.data.title,
      cover: getCoverImage(next.data.cover),
      date: formatDate(next.data.date)
    } : null
  };
}

const { entry, prev, next } = Astro.props;
const { Content } = await entry.render();

// 获取相邻文章信息
const adjacentArticles = await getAdjacentArticles(entry.slug);
---

<BaseLayout title={entry.data.title}>
  <article id="article-content" class="prose max-w-none dark:prose-invert p-4 rounded-lg shadow-sm bg-white/70 backdrop-blur-xl border border-white/20 shadow-[0_1px_0_0_rgba(255,255,255,0.6)_inset,0_8px_30px_rgba(0,0,0,0.06)] dark:bg-cyan-950/30 dark:backdrop-blur-xl dark:border-white/10 dark:shadow-[0_1px_0_0_rgba(255,255,255,0.08)_inset,0_8px_30px_rgba(0,0,0,0.35)]">
    <Content />
  </article>

  {/* 文章导航 */}
  {(adjacentArticles.prev || adjacentArticles.next) && (
    <nav class="mt-12 grid grid-cols-1 md:grid-cols-2 gap-6">
      {adjacentArticles.prev && (
        <a 
          href={`/articles/${adjacentArticles.prev.slug}`}
          class="group relative overflow-hidden rounded-xl bg-white dark:bg-gray-800 shadow-lg hover:shadow-xl transition-all duration-300 transform hover:-translate-y-1 border border-gray-200 dark:border-gray-700"
        >
          {/* 背景图片 */}
          <div class="absolute inset-0 overflow-hidden">
            <img 
              src={adjacentArticles.prev.cover} 
              alt={adjacentArticles.prev.title}
              class="w-full h-full object-cover transition-transform duration-500 group-hover:scale-110"
            />
            <div class="absolute inset-0 bg-gradient-to-t from-black/70 via-black/40 to-transparent"></div>
          </div>
          
          {/* 内容区域 */}
          <div class="relative p-6 min-h-[120px] flex flex-col justify-end">
            <div class="flex items-center mb-2">
              <svg class="w-4 h-4 text-white/80 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
              </svg>
              <span class="text-xs font-medium text-white/80 uppercase tracking-wider">上一篇</span>
            </div>
            <h3 class="text-lg font-bold text-white leading-tight line-clamp-2 group-hover:text-cyan-300 transition-colors duration-300">
              {adjacentArticles.prev.title}
            </h3>
            <p class="text-sm text-white/70 mt-1">{adjacentArticles.prev.date}</p>
          </div>
          
          {/* 悬停遮罩 */}
          <div class="absolute inset-0 bg-cyan-600/20 opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>
        </a>
      )}
      
      {adjacentArticles.next && (
        <a 
          href={`/articles/${adjacentArticles.next.slug}`}
          class="group relative overflow-hidden rounded-xl bg-white dark:bg-gray-800 shadow-lg hover:shadow-xl transition-all duration-300 transform hover:-translate-y-1 border border-gray-200 dark:border-gray-700 md:col-start-2"
        >
          {/* 背景图片 */}
          <div class="absolute inset-0 overflow-hidden">
            <img 
              src={adjacentArticles.next.cover} 
              alt={adjacentArticles.next.title}
              class="w-full h-full object-cover transition-transform duration-500 group-hover:scale-110"
            />
            <div class="absolute inset-0 bg-gradient-to-t from-black/70 via-black/40 to-transparent"></div>
          </div>
          
          {/* 内容区域 */}
          <div class="relative p-6 min-h-[120px] flex flex-col justify-end">
            <div class="flex items-center justify-end mb-2">
              <span class="text-xs font-medium text-white/80 uppercase tracking-wider">下一篇</span>
              <svg class="w-4 h-4 text-white/80 ml-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
              </svg>
            </div>
            <h3 class="text-lg font-bold text-white leading-tight line-clamp-2 text-right group-hover:text-cyan-300 transition-colors duration-300">
              {adjacentArticles.next.title}
            </h3>
            <p class="text-sm text-white/70 mt-1 text-right">{adjacentArticles.next.date}</p>
          </div>
          
          {/* 悬停遮罩 */}
          <div class="absolute inset-0 bg-cyan-600/20 opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>
        </a>
      )}
    </nav>
  )}
</BaseLayout>