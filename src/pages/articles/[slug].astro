---
import { getEntry, getCollection } from 'astro:content';
import Layout from '../../layouts/article.astro';

export async function getStaticPaths() {
  const articles = await getCollection('articles');
  return articles.map(article => ({
    params: { slug: article.slug },
    props: { article }
  }));
}

const { article } = Astro.props;
const { Content } = await article.render();

// 获取所有文章用于导航
const allArticles = await getCollection('articles');
// 按日期排序
allArticles.sort((a, b) => new Date(b.data.date || '').getTime() - new Date(a.data.date || '').getTime());

// 查找上一篇和下一篇文章
const currentIndex = allArticles.findIndex(a => a.slug === article.slug);
const prevArticle = currentIndex < allArticles.length - 1 ? allArticles[currentIndex + 1] : null;
const nextArticle = currentIndex > 0 ? allArticles[currentIndex - 1] : null;

// 处理frontmatter默认值
// title: 如果用户未提供，使用文章一级标题
const title = article.data.title || article.body.split('\n')[0].replace('#', '').trim();

// cover: 如果用户未提供，使用默认图片；如果用户提供了但值为空，则不使用
let cover = 'https://picsum.photos/800/400?random=100';
if (article.data.cover !== undefined) {
  if (article.data.cover) {
    cover = article.data.cover;
  } else {
    cover = null;
  }
}

// date: 如果用户未提供，使用文件创建时间；如果用户提供了但值为空，则不使用
let date = null;

// 检查用户是否提供了日期
if (article.data.date !== undefined) {
  if (article.data.date) {
    // 用户提供了日期，确保格式为 yyyy-mm-dd
    const userDate = new Date(article.data.date);
    if (!isNaN(userDate.getTime())) {
      date = userDate.toISOString().slice(0, 10); // 格式化为 yyyy-mm-dd
    }
  }
}

// 如果用户未提供有效日期，使用文件创建时间
if (!date) {
  // 注意：获取文件创建时间的方式可能需要根据项目实际情况调整
  // 以下代码假设文章文件存储在 src/content/articles 目录下
  try {
    // 引入 Node.js 模块
    const fs = require('fs');
    const path = require('path');
    
    // 获取文件路径
    const filePath = path.join(process.cwd(), 'src', 'content', 'articles', `${article.slug}.md`);
    
    // 获取文件状态
    const stats = fs.statSync(filePath);
    
    // 获取创建时间
    const createDate = new Date(stats.birthtime);
    date = createDate.toISOString().slice(0, 10); // 格式化为 yyyy-mm-dd
  } catch (error) {
    console.error('Failed to get file creation time:', error);
    // 如果无法获取文件创建时间，使用当前日期作为备用
    date = new Date().toISOString().slice(0, 10); // 格式化为 yyyy-mm-dd
  }
}

// categories: 如果用户未提供，不使用；如果用户提供了但值为空或空数组，则不使用
let categories = null;
if (article.data.categories !== undefined) {
  if (article.data.categories && article.data.categories.length > 0) {
    categories = article.data.categories;
  }
}

// tags: 如果用户未提供，不使用；如果用户提供了但值为空或空数组，则不使用
let tags = null;
if (article.data.tags !== undefined) {
  if (article.data.tags && article.data.tags.length > 0) {
    tags = article.data.tags;
  }
}

// description: 如果用户未提供，不使用；如果用户提供了但值为空，则不使用
let description = null;
if (article.data.description !== undefined) {
  if (article.data.description) {
    description = article.data.description;
  }
}
---

<Layout title={title}>
  <div class="container mx-auto">
    <div>
      <!-- 主要内容区域 -->
      <div>
        <article class="bg-white rounded-lg shadow-sm overflow-hidden">
          <!-- 文章封面 -->
          {cover && (
            <div class="relative h-64 overflow-hidden">
              <img src={cover} alt={title} class="w-full h-full object-cover" />
              <div class="absolute inset-0 bg-gradient-to-t from-black/60 to-transparent flex items-end">
                <div class="p-6 text-white">
                  <h1 class="text-2xl md:text-3xl font-bold mb-2">{title}</h1>
                  <div class="flex items-center text-sm opacity-90 space-x-4 flex-wrap">
                    {date && <span>{date}</span>}
                    {categories && <span>{categories.join(', ')}</span>}
                    {tags && <span>标签: {tags.join(', ')}</span>}
                  </div>
                </div>
              </div>
            </div>
          )}
          {!cover && (
            <div class="p-6 bg-white">
              <h1 class="text-2xl md:text-3xl font-bold mb-2">{title}</h1>
              <div class="flex items-center text-sm opacity-90 space-x-4 flex-wrap">
                {date && <span>{date}</span>}
                {categories && <span>{categories.join(', ')}</span>}
                {tags && <span>标签: {tags.join(', ')}</span>}
              </div>
            </div>
          )}

          <!-- 文章内容 -->
          <div class="p-6 prose max-w-none" id="article-content">
            <Content />
          </div>

          <!-- 文章导航 -->
          <div class="p-6 border-t border-gray-100 flex justify-between items-center">
            {prevArticle && (
              <a href={`/articles/${prevArticle.slug}`} class="flex items-center text-blue-600 hover:text-blue-800 transition-colors">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" />
                </svg>
                {prevArticle.data.title || prevArticle.body.split('\n')[0].replace('#', '').trim()}
              </a>
            )}
            {nextArticle && (
              <a href={`/articles/${nextArticle.slug}`} class="flex items-center text-blue-600 hover:text-blue-800 transition-colors">
                {nextArticle.data.title || nextArticle.body.split('\n')[0].replace('#', '').trim()}
                <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 ml-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
                </svg>
              </a>
            )}
          </div>
        </article>
      </div>
      </div>
    </div>
  </div>

  <script>
    // 生成文章目录
    document.addEventListener('DOMContentLoaded', () => {
      const content = document.getElementById('article-content');
      const toc = document.getElementById('table-of-contents');
      const headings = content.querySelectorAll('h2, h3');

      if (headings.length === 0) {
        toc.innerHTML = '<p class="text-gray-500 italic">本文没有目录</p>';
        return;
      }

      let tocHTML = '';
      headings.forEach((heading) => {
        const id = heading.id || heading.textContent.toLowerCase().replace(/\s+/g, '-');
        heading.id = id;
        const level = heading.tagName.toLowerCase();
        const indent = level === 'h3' ? 'pl-4 border-l-2 border-gray-100' : '';

        tocHTML += `
          <a href="#${id}" class="block py-1 ${indent} hover:text-blue-600 transition-colors" data-level="${level}">
            ${heading.textContent}
          </a>
        `;
      });

      toc.innerHTML = tocHTML;

      // 平滑滚动
      document.querySelectorAll('#table-of-contents a').forEach((anchor) => {
        anchor.addEventListener('click', (e) => {
          e.preventDefault();
          const targetId = anchor.getAttribute('href');
          const targetElement = document.querySelector(targetId);

          if (targetElement) {
            window.scrollTo({
              top: targetElement.offsetTop - 80,
              behavior: 'smooth'
            });
          }
        });
      });

      // 滚动时高亮当前章节
      window.addEventListener('scroll', () => {
        let currentSectionId = '';
        headings.forEach((heading) => {
          const sectionTop = heading.offsetTop;
          if (window.scrollY >= sectionTop - 100) {
            currentSectionId = '#' + heading.id;
          }
        });

        document.querySelectorAll('#table-of-contents a').forEach((link) => {
          if (link.getAttribute('href') === currentSectionId) {
            link.classList.add('text-blue-600', 'font-medium');
          } else {
            link.classList.remove('text-blue-600', 'font-medium');
          }
        });
      });

      // 导航栏滚动效果
      let lastScrollTop = 0;
      const header = document.querySelector('header');
      if (header) {
        window.addEventListener('scroll', () => {
          const scrollTop = window.pageYOffset || document.documentElement.scrollTop;

          if (scrollTop > lastScrollTop && scrollTop > 100) {
            // 向下滚动，显示文章标题
            header.classList.add('show-title');
            header.classList.remove('show-nav');
          } else {
            // 向上滚动，显示导航
            header.classList.remove('show-title');
            header.classList.add('show-nav');
          }

          lastScrollTop = scrollTop;
        });
      }
    });
  </script>

  <style>
    /* 文章标题滚动效果样式 */
    header {
      transition: all 0.3s ease;
    }

    header.show-title .nav-content {
      display: none;
    }

    header.show-title .article-title {
      display: block;
    }

    header .article-title {
      display: none;
      font-weight: bold;
      white-space: nowrap;
      overflow: hidden;
      text-overflow: ellipsis;
      max-width: 100%;
    }
  </style>
</Layout>