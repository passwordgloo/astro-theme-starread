---
import { getEntryBySlug, getCollection } from 'astro:content';
import BaseLayout from '../../layouts/article.astro';
import { themeConfig } from '../../../starread.config';
import ArticleNav from '../../components/ArticleNav.astro';
import ArticleInfo from '../../components/ArticleInfo.jsx';

export async function getStaticPaths() {
  const entries = await getCollection('articles');
  
  // 按日期排序文章
  const sortedEntries = [...entries].sort((a, b) => 
    new Date(a.data.date || 0).getTime() - new Date(b.data.date || 0).getTime()
  );
  
  return sortedEntries.map((entry, index) => {
    const prev = index > 0 ? sortedEntries[index - 1].slug : null;
    const next = index < sortedEntries.length - 1 ? sortedEntries[index + 1].slug : null;
    
    return {
      params: { slug: entry.slug },
      props: { 
        entry,
        prev,
        next
      },
    };
  });
}

// 日期格式化工具函数
export function formatDate(dateString?: string | Date): string {
  if (!dateString) {
    return new Date().toISOString().split('T')[0];
  }
  
  if (typeof dateString === 'string') {
    // 处理 "2024-01-01 12:00:00" 或 "2024-01-01T12:00:00.000Z" 格式
    const datePart = dateString.split(' ')[0] || dateString.split('T')[0];
    return datePart;
  }
  
  if (dateString instanceof Date) {
    return dateString.toISOString().split('T')[0];
  }
  
  return new Date().toISOString().split('T')[0];
}

// 封面图片处理工具函数
export function getCoverImage(cover?: string): string {
  return cover || themeConfig.site.defaultCover;
}

// 作者信息处理工具函数
export function getAuthorInfo(author?: { name?: string; avatar?: string }) {
  return {
    name: author?.name || themeConfig.author.name,
    avatar: author?.avatar || themeConfig.author.avatar
  };
}

// 文章排序工具函数
export function sortArticlesByDate(articles: any[]) {
  return [...articles].sort((a, b) => 
    new Date(b.data.date || 0).getTime() - new Date(a.data.date || 0).getTime()
  );
}

// 文章数据预处理工具函数
export function processArticleData(articles: any[]) {
  return articles.map(article => ({
    ...article,
    processed: {
      date: formatDate(article.data.date),
      cover: getCoverImage(article.data.cover),
      author: getAuthorInfo(article.data.author),
      categories: article.data.categories || [],
      tags: article.data.tags || [],
      views: article.data.views || 0
    }
  }));
}

// 获取相邻文章信息工具函数
export async function getAdjacentArticles(currentSlug: string) {
  const entries = await getCollection('articles');
  const sortedEntries = [...entries].sort((a, b) => 
    new Date(a.data.date || 0).getTime() - new Date(b.data.date || 0).getTime()
  );
  
  const currentIndex = sortedEntries.findIndex(entry => entry.slug === currentSlug);
  
  if (currentIndex === -1) {
    return { prev: null, next: null };
  }
  
  const prev = currentIndex > 0 ? sortedEntries[currentIndex - 1] : null;
  const next = currentIndex < sortedEntries.length - 1 ? sortedEntries[currentIndex + 1] : null;
  
  return {
    prev: prev ? {
      slug: prev.slug,
      title: prev.data.title,
      cover: getCoverImage(prev.data.cover),
      date: formatDate(prev.data.date)
    } : null,
    next: next ? {
      slug: next.slug,
      title: next.data.title,
      cover: getCoverImage(next.data.cover),
      date: formatDate(next.data.date)
    } : null
  };
}

const { entry, prev, next } = Astro.props;
const { Content } = await entry.render();

// 获取相邻文章信息
const adjacentArticles = await getAdjacentArticles(entry.slug);
---

<BaseLayout title={entry.data.title}>
  {/* 文章信息组件 */}
  <div class="mb-8">
    <ArticleInfo 
      client:load
      title={entry.data.title}
      cover={entry.data.cover || themeConfig.site.defaultCover}
      date={formatDate(entry.data.date)}
      tags={entry.data.tags || []}
      categories={entry.data.categories || []}
    />
  </div>

  <article id="article-content" class="prose max-w-none dark:prose-invert p-4 rounded-lg shadow-sm bg-white/70 backdrop-blur-xl border border-white/20 shadow-[0_1px_0_0_rgba(255,255,255,0.6)_inset,0_8px_30px_rgba(0,0,0,0.06)] dark:bg-cyan-950/30 dark:backdrop-blur-xl dark:border-white/10 dark:shadow-[0_1px_0_0_rgba(255,255,255,0.08)_inset,0_8px_30px_rgba(0,0,0,0.35)]">
    <Content />
  </article>

  {/* 文章导航组件 */}
  <ArticleNav 
    prev={adjacentArticles.prev}
    next={adjacentArticles.next}
  />
</BaseLayout>