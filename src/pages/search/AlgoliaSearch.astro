---

import { themeConfig } from '../../../starread.config.ts';

const { appId, searchKey, indexName } = themeConfig.search.algolia;
const ref = Astro.props.ref || null;
---

<div class="search-container relative" ref={ref}>
  <button 
    id="search-toggle" 
    class="p-2 rounded-full hover:bg-gray-100 dark:hover:bg-gray-800 transition-colors focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 dark:focus:ring-offset-gray-900"
    aria-label="搜索"
  >
    <span class="icon-[lucide--search] h-5 w-5 text-gray-700 dark:text-gray-300"></span>
  </button>
  <!-- 搜索框容器 -->
  <div 
    id="search-dropdown" 
    class="absolute right-0 mt-2 w-80 md:w-96 bg-white dark:bg-cyan-950 shadow-lg rounded-md z-50 overflow-hidden transform origin-top-right scale-100 transition-all duration-200"
  >
    <div class="relative">
      <!-- 输入框 -->
      <input 
        id="search-input" 
        type="text" 
        placeholder="搜索文章..." 
        class="w-full px-4 py-3 pl-10 focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-900 dark:text-white dark:focus:ring-blue-600"
      />
      <span class="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400">
        <span class="icon-[lucide--search] h-5 w-5"></span>
      </span>
      <!-- 关闭按钮 -->
      <button 
        id="search-close" 
        class="absolute right-3 top-1/2 transform -translate-y-1/2 p-1 rounded-full hover:bg-gray-100 dark:hover:bg-gray-800 transition-colors"
        aria-label="关闭搜索"
        onclick="document.getElementById('search-dropdown').classList.add('hidden')"
      >
        <span class="icon-[lucide--x] h-5 w-5 text-gray-400"></span>
      </button>
    </div>
    
    <!-- 搜索结果 -->
    <div id="search-results" class="max-h-96 overflow-y-auto p-2">
      <div id="search-placeholder" class="text-center py-8 text-gray-500 dark:text-gray-400">
        输入关键词开始搜索
      </div>
    </div>
  </div>
</div>

<!-- 前端交互脚本 -->
<script is:inline>
    // 使用本地模拟数据进行测试
  const fetchMockData = async () => {
    const response = await fetch('/data.json');
    return response.json();
  };

  const searchContainer = document.querySelector('.search-container');
  const searchDropdown = document.getElementById('search-dropdown');
  const searchInput = document.getElementById('search-input');
  const searchResults = document.getElementById('search-results');
  const searchPlaceholder = document.getElementById('search-placeholder');

  // 初始隐藏搜索下拉框
  searchDropdown.classList.add('hidden');

  // 搜索功能实现
  let searchTimeout;
  const handleSearch = async (query) => {
    if (!query.trim()) {
      searchResults.innerHTML = '<div class="text-center py-8 text-gray-500 dark:text-gray-400">输入关键词开始搜索</div>';
      return;
    }
    if (query.length < 2) {
      searchResults.innerHTML = '<div class="text-center py-8 text-gray-500 dark:text-gray-400">请输入至少2个字符以搜索</div>';
      return;
    }

    try {
      searchResults.innerHTML = '<div class="text-center py-8 text-gray-500 dark:text-gray-400">搜索中...</div>';
      // 使用本地模拟数据替代Algolia API调用
      const mockData = await fetchMockData();
      const hits = mockData.filter(hit => 
        hit.title.toLowerCase().includes(query.toLowerCase()) || 
        hit.content.toLowerCase().includes(query.toLowerCase())
      );

      if (hits.length === 0) {
        searchResults.innerHTML = '<div class="text-center py-8 text-gray-500 dark:text-gray-400">没有找到匹配结果</div>';
        return;
      }

      // 渲染搜索结果
      searchResults.innerHTML = hits.map(hit => `
        <a href="/${hit.slug}" class="block p-4 hover:bg-gray-50 dark:hover:bg-gray-800 rounded-md transition-colors">
          <h3 class="font-medium text-gray-900 dark:text-white">${hit.title}</h3>
          <p class="text-sm text-gray-500 dark:text-gray-400 mt-1 line-clamp-2">${hit.content.substring(0, 100)}...</p>

        </a>
      `).join('');
    } catch (error) {
      console.error('Algolia搜索错误:', error);
      searchResults.innerHTML = '<div class="text-center py-8 text-red-500 dark:text-red-400">搜索出错，请稍后重试</div>';
    }
  };

  // 搜索输入事件监听
  searchInput.addEventListener('input', (e) => {
    clearTimeout(searchTimeout);
    const query = e.target.value;
    searchTimeout = setTimeout(() => handleSearch(query), 300);
  });
  
  // 初始化时自动聚焦搜索框
    setTimeout(() => searchInput.focus(), 300);

  // 搜索框显示/隐藏切换
  const searchToggle = document.getElementById('search-toggle');

  searchToggle.addEventListener('click', () => {
    searchDropdown.classList.toggle('hidden');
  });

  // 点击页面其他区域关闭搜索框
  document.addEventListener('click', (e) => {
    if (!searchContainer.contains(e.target)) {
      searchDropdown.classList.add('hidden');
    }
  });
</script>
