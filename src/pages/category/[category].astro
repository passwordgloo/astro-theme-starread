---
import { getCollection } from 'astro:content';
import CategoryLayout from '../../layouts/category.astro';

// 生成所有分类页面的静态路径
export async function getStaticPaths() {
  const articles = await getCollection('articles');
  const notes = await getCollection('notes');
  const allContent = [...articles, ...notes];
  
  // 收集所有分类
  const allCategories = new Set<string>();
  allContent.forEach(item => {
    item.data.categories?.forEach(category => allCategories.add(category));
  });
  
  // 为每个分类生成静态路径
  return Array.from(allCategories).map(category => ({
    params: { category },
    props: { category },
  }));
}

// 获取当前分类和相关文章
const { category } = Astro.props;
const articles = await getCollection('articles', ({ data }) => 
  data.categories?.includes(category) || false
);
const notes = await getCollection('notes', ({ data }) => 
  data.categories?.includes(category) || false
);
// 合并并按日期排序，确保每个项目有正确的永久链接
const allContent = [...articles, ...notes].map(item => ({
  ...item,
  // 确保有正确的永久链接
  data: {
    ...item.data,
    permalink: item.data.permalink || 
      (item.collection === 'notes' ? `/notes/${item.slug}` : `/articles/${item.slug}`)
  }
})).sort((a, b) => 
  new Date(b.data.date).getTime() - new Date(a.data.date).getTime()
);

// 获取所有分类及其计数
const allArticles = await getCollection('articles');
const allNotes = await getCollection('notes');
const allItems = [...allArticles, ...allNotes];
const categoryCounts: Record<string, number> = {};
allItems.forEach(item => {
  item.data.categories?.forEach(cat => {
    categoryCounts[cat] = (categoryCounts[cat] || 0) + 1;
  });
});

const pageTitle = `分类: ${category}`;
---

<CategoryLayout 
  title={pageTitle} 
  categoryName={category} 
  currentCategory={category} 
  articles={allContent} 
  allCategories={categoryCounts} 
/>